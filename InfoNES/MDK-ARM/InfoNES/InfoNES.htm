<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [InfoNES\InfoNES.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image InfoNES\InfoNES.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue Jul 30 15:46:00 2024
<BR><P>
<H3>Maximum Stack Usage =       1628 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; my_main &rArr; Menu_Del &rArr; Game_Init &rArr; nes_load &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_FatFs_Write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[3e4]">map67_0</a>
 <LI><a href="#[2b3]">map67_</a>
 <LI><a href="#[29a]">map89_</a>
 <LI><a href="#[29b]">mapAB_</a>
 <LI><a href="#[29c]">mapCD_</a>
 <LI><a href="#[29d]">mapEF_</a>
 <LI><a href="#[3e5]">map89ABCDEF_</a>
 <LI><a href="#[20]">PPU_W</a>
 <LI><a href="#[18]">PPU_R</a>
 <LI><a href="#[83]">_00</a>
 <LI><a href="#[84]">_01</a>
 <LI><a href="#[87]">_05</a>
 <LI><a href="#[88]">_06</a>
 <LI><a href="#[8a]">_08</a>
 <LI><a href="#[8b]">_09</a>
 <LI><a href="#[8c]">_0A</a>
 <LI><a href="#[8d]">_0D</a>
 <LI><a href="#[8e]">_0E</a>
 <LI><a href="#[8f]">_10</a>
 <LI><a href="#[90]">_11</a>
 <LI><a href="#[92]">_15</a>
 <LI><a href="#[93]">_16</a>
 <LI><a href="#[94]">_18</a>
 <LI><a href="#[95]">_19</a>
 <LI><a href="#[96]">_1D</a>
 <LI><a href="#[97]">_1E</a>
 <LI><a href="#[98]">_20</a>
 <LI><a href="#[99]">_21</a>
 <LI><a href="#[9a]">_24</a>
 <LI><a href="#[9b]">_25</a>
 <LI><a href="#[9c]">_26</a>
 <LI><a href="#[9d]">_28</a>
 <LI><a href="#[9e]">_29</a>
 <LI><a href="#[9f]">_2A</a>
 <LI><a href="#[a0]">_2C</a>
 <LI><a href="#[a1]">_2D</a>
 <LI><a href="#[a2]">_2E</a>
 <LI><a href="#[a3]">_30</a>
 <LI><a href="#[a4]">_31</a>
 <LI><a href="#[a5]">_35</a>
 <LI><a href="#[a6]">_36</a>
 <LI><a href="#[a7]">_38</a>
 <LI><a href="#[a8]">_39</a>
 <LI><a href="#[a9]">_3D</a>
 <LI><a href="#[aa]">_3E</a>
 <LI><a href="#[ab]">_40</a>
 <LI><a href="#[ac]">_41</a>
 <LI><a href="#[ad]">_45</a>
 <LI><a href="#[ae]">_46</a>
 <LI><a href="#[af]">_48</a>
 <LI><a href="#[b0]">_49</a>
 <LI><a href="#[b1]">_4A</a>
 <LI><a href="#[b2]">_4C</a>
 <LI><a href="#[b3]">_4D</a>
 <LI><a href="#[b4]">_4E</a>
 <LI><a href="#[b5]">_50</a>
 <LI><a href="#[b6]">_51</a>
 <LI><a href="#[b7]">_55</a>
 <LI><a href="#[b8]">_56</a>
 <LI><a href="#[b9]">_58</a>
 <LI><a href="#[ba]">_59</a>
 <LI><a href="#[bb]">_5D</a>
 <LI><a href="#[bc]">_5E</a>
 <LI><a href="#[bd]">_60</a>
 <LI><a href="#[be]">_61</a>
 <LI><a href="#[bf]">_65</a>
 <LI><a href="#[c0]">_66</a>
 <LI><a href="#[c2]">_68</a>
 <LI><a href="#[c3]">_69</a>
 <LI><a href="#[c4]">_6A</a>
 <LI><a href="#[c5]">_6C</a>
 <LI><a href="#[c6]">_6D</a>
 <LI><a href="#[c7]">_6E</a>
 <LI><a href="#[c8]">_70</a>
 <LI><a href="#[c9]">_71</a>
 <LI><a href="#[ca]">_75</a>
 <LI><a href="#[cb]">_76</a>
 <LI><a href="#[cc]">_78</a>
 <LI><a href="#[cd]">_79</a>
 <LI><a href="#[ce]">_7D</a>
 <LI><a href="#[cf]">_7E</a>
 <LI><a href="#[d0]">_81</a>
 <LI><a href="#[d1]">_84</a>
 <LI><a href="#[d2]">_85</a>
 <LI><a href="#[d3]">_86</a>
 <LI><a href="#[d4]">_88</a>
 <LI><a href="#[d5]">_8A</a>
 <LI><a href="#[d6]">_8C</a>
 <LI><a href="#[d7]">_8D</a>
 <LI><a href="#[d8]">_8E</a>
 <LI><a href="#[d9]">_90</a>
 <LI><a href="#[da]">_91</a>
 <LI><a href="#[db]">_94</a>
 <LI><a href="#[dc]">_95</a>
 <LI><a href="#[dd]">_96</a>
 <LI><a href="#[de]">_98</a>
 <LI><a href="#[df]">_99</a>
 <LI><a href="#[e0]">_9A</a>
 <LI><a href="#[e1]">_9D</a>
 <LI><a href="#[e2]">_A0</a>
 <LI><a href="#[e3]">_A1</a>
 <LI><a href="#[e4]">_A2</a>
 <LI><a href="#[e5]">_A4</a>
 <LI><a href="#[e6]">_A5</a>
 <LI><a href="#[e7]">_A6</a>
 <LI><a href="#[e8]">_A8</a>
 <LI><a href="#[e9]">_A9</a>
 <LI><a href="#[ea]">_AA</a>
 <LI><a href="#[eb]">_AC</a>
 <LI><a href="#[ec]">_AD</a>
 <LI><a href="#[ed]">_AE</a>
 <LI><a href="#[ee]">_B0</a>
 <LI><a href="#[ef]">_B1</a>
 <LI><a href="#[f0]">_B4</a>
 <LI><a href="#[f1]">_B5</a>
 <LI><a href="#[f2]">_B6</a>
 <LI><a href="#[f3]">_B8</a>
 <LI><a href="#[f4]">_B9</a>
 <LI><a href="#[f5]">_BA</a>
 <LI><a href="#[f6]">_BC</a>
 <LI><a href="#[f7]">_BD</a>
 <LI><a href="#[f8]">_BE</a>
 <LI><a href="#[f9]">_C0</a>
 <LI><a href="#[fa]">_C1</a>
 <LI><a href="#[fb]">_C4</a>
 <LI><a href="#[fc]">_C5</a>
 <LI><a href="#[fd]">_C6</a>
 <LI><a href="#[fe]">_C8</a>
 <LI><a href="#[ff]">_C9</a>
 <LI><a href="#[100]">_CA</a>
 <LI><a href="#[101]">_CC</a>
 <LI><a href="#[102]">_CD</a>
 <LI><a href="#[103]">_CE</a>
 <LI><a href="#[104]">_D0</a>
 <LI><a href="#[105]">_D1</a>
 <LI><a href="#[106]">_D5</a>
 <LI><a href="#[107]">_D6</a>
 <LI><a href="#[108]">_D8</a>
 <LI><a href="#[109]">_D9</a>
 <LI><a href="#[10a]">_DD</a>
 <LI><a href="#[10b]">_DE</a>
 <LI><a href="#[10c]">_E0</a>
 <LI><a href="#[10d]">_E1</a>
 <LI><a href="#[10e]">_E4</a>
 <LI><a href="#[10f]">_E5</a>
 <LI><a href="#[110]">_E6</a>
 <LI><a href="#[111]">_E8</a>
 <LI><a href="#[112]">_E9</a>
 <LI><a href="#[113]">_EA</a>
 <LI><a href="#[114]">_EC</a>
 <LI><a href="#[115]">_ED</a>
 <LI><a href="#[116]">_EE</a>
 <LI><a href="#[117]">_F0</a>
 <LI><a href="#[118]">_F1</a>
 <LI><a href="#[119]">_F5</a>
 <LI><a href="#[11a]">_F6</a>
 <LI><a href="#[11b]">_F8</a>
 <LI><a href="#[11c]">_F9</a>
 <LI><a href="#[11e]">_FD</a>
 <LI><a href="#[11f]">_FE</a>
 <LI><a href="#[120]">_FF</a>
 <LI><a href="#[11d]">_FB</a>
 <LI><a href="#[91]">_14</a>
 <LI><a href="#[c1]">_67</a>
 <LI><a href="#[86]">_03</a>
 <LI><a href="#[89]">_07</a>
 <LI><a href="#[85]">_xx</a>
 <LI><a href="#[24]">exit_run</a>
 <LI><a href="#[1bc]">VecCont</a>
 <LI><a href="#[19]">IO_R</a>
 <LI><a href="#[21]">IO_W</a>
 <LI><a href="#[1a1]">apu_w</a>
 <LI><a href="#[1a3]">apu_4015w</a>
 <LI><a href="#[1a5]">apu_4017w</a>
 <LI><a href="#[19e]">apu_4015R</a>
 <LI><a href="#[1a2]">dma_W</a>
 <LI><a href="#[1a4]">joy0_W</a>
 <LI><a href="#[19f]">joy0_R</a>
 <LI><a href="#[1a0]">joy1_R</a>
 <LI><a href="#[1a6]">Mapper_W</a>
 <LI><a href="#[3c7]">empty_R</a>
 <LI><a href="#[17]">ram_R</a>
 <LI><a href="#[1f]">ram_W</a>
 <LI><a href="#[1a]">sram_R</a>
 <LI><a href="#[22]">sram_W</a>
 <LI><a href="#[1b]">rom_R80</a>
 <LI><a href="#[1c]">rom_RA0</a>
 <LI><a href="#[1d]">rom_RC0</a>
 <LI><a href="#[1e]">rom_RE0</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[41]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[41]">ADC_IRQHandler</a><BR>
 <LI><a href="#[29]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">BusFault_Handler</a><BR>
 <LI><a href="#[27]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">HardFault_Handler</a><BR>
 <LI><a href="#[28]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">MemManage_Handler</a><BR>
 <LI><a href="#[26]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">NMI_Handler</a><BR>
 <LI><a href="#[2a]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[41]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">CAN1_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6f]">CAN2_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[70]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[71]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6e]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7d]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">DMA1_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">DMA1_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">DMA1_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">DMA1_Stream6_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream6_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5e]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[67]">DMA2_Stream0_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[68]">DMA2_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[69]">DMA2_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6a]">DMA2_Stream3_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6b]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[73]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[74]">DMA2_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[75]">DMA2_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6c]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6d]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">EXTI0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">EXTI15_10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">EXTI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">EXTI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">EXTI4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">EXTI9_5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5f]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7f]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7e]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[78]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[77]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[19]">IO_R</a> from 6502.o(io_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[21]">IO_W</a> from 6502.o(io_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[127]">MAP0_Reset</a> from nes_mapper.o(i.MAP0_Reset) referenced from nes_mapper.o(i.MAP0_Init)
 <LI><a href="#[129]">MAP113_MemoryWrite</a> from nes_mapper.o(i.MAP113_MemoryWrite) referenced from nes_mapper.o(i.MAP113_Init)
 <LI><a href="#[12a]">MAP113_MemoryWriteLow</a> from nes_mapper.o(i.MAP113_MemoryWriteLow) referenced from nes_mapper.o(i.MAP113_Init)
 <LI><a href="#[128]">MAP113_Reset</a> from nes_mapper.o(i.MAP113_Reset) referenced from nes_mapper.o(i.MAP113_Init)
 <LI><a href="#[12c]">MAP11_MemoryWrite</a> from nes_mapper.o(i.MAP11_MemoryWrite) referenced from nes_mapper.o(i.MAP11_Init)
 <LI><a href="#[12b]">MAP11_Reset</a> from nes_mapper.o(i.MAP11_Reset) referenced from nes_mapper.o(i.MAP11_Init)
 <LI><a href="#[12e]">MAP13_MemoryWrite</a> from nes_mapper.o(i.MAP13_MemoryWrite) referenced from nes_mapper.o(i.MAP13_Init)
 <LI><a href="#[12d]">MAP13_Reset</a> from nes_mapper.o(i.MAP13_Reset) referenced from nes_mapper.o(i.MAP13_Init)
 <LI><a href="#[130]">MAP15_MemoryWrite</a> from nes_mapper.o(i.MAP15_MemoryWrite) referenced from nes_mapper.o(i.MAP15_Init)
 <LI><a href="#[12f]">MAP15_Reset</a> from nes_mapper.o(i.MAP15_Reset) referenced from nes_mapper.o(i.MAP15_Init)
 <LI><a href="#[133]">MAP16_HSync</a> from nes_mapper.o(i.MAP16_HSync) referenced from nes_mapper.o(i.MAP16_Init)
 <LI><a href="#[132]">MAP16_MemoryWrite</a> from nes_mapper.o(i.MAP16_MemoryWrite) referenced from nes_mapper.o(i.MAP16_Init)
 <LI><a href="#[131]">MAP16_Reset</a> from nes_mapper.o(i.MAP16_Reset) referenced from nes_mapper.o(i.MAP16_Init)
 <LI><a href="#[136]">MAP17_HSync</a> from nes_mapper.o(i.MAP17_HSync) referenced from nes_mapper.o(i.MAP17_Init)
 <LI><a href="#[135]">MAP17_MemoryWriteLow</a> from nes_mapper.o(i.MAP17_MemoryWriteLow) referenced from nes_mapper.o(i.MAP17_Init)
 <LI><a href="#[134]">MAP17_Reset</a> from nes_mapper.o(i.MAP17_Reset) referenced from nes_mapper.o(i.MAP17_Init)
 <LI><a href="#[139]">MAP189_HSync</a> from nes_mapper.o(i.MAP189_HSync) referenced from nes_mapper.o(i.MAP189_Init)
 <LI><a href="#[138]">MAP189_MemoryWrite</a> from nes_mapper.o(i.MAP189_MemoryWrite) referenced from nes_mapper.o(i.MAP189_Init)
 <LI><a href="#[137]">MAP189_Reset</a> from nes_mapper.o(i.MAP189_Reset) referenced from nes_mapper.o(i.MAP189_Init)
 <LI><a href="#[13c]">MAP18_HSync</a> from nes_mapper.o(i.MAP18_HSync) referenced from nes_mapper.o(i.MAP18_Init)
 <LI><a href="#[13b]">MAP18_MemoryWrite</a> from nes_mapper.o(i.MAP18_MemoryWrite) referenced from nes_mapper.o(i.MAP18_Init)
 <LI><a href="#[13a]">MAP18_Reset</a> from nes_mapper.o(i.MAP18_Reset) referenced from nes_mapper.o(i.MAP18_Init)
 <LI><a href="#[13f]">MAP19_HSync</a> from nes_mapper.o(i.MAP19_HSync) referenced from nes_mapper.o(i.MAP19_Init)
 <LI><a href="#[13e]">MAP19_MemoryWrite</a> from nes_mapper.o(i.MAP19_MemoryWrite) referenced from nes_mapper.o(i.MAP19_Init)
 <LI><a href="#[13d]">MAP19_Reset</a> from nes_mapper.o(i.MAP19_Reset) referenced from nes_mapper.o(i.MAP19_Init)
 <LI><a href="#[141]">MAP1_MemoryWrite</a> from nes_mapper.o(i.MAP1_MemoryWrite) referenced from nes_mapper.o(i.MAP1_Init)
 <LI><a href="#[140]">MAP1_Reset</a> from nes_mapper.o(i.MAP1_Reset) referenced from nes_mapper.o(i.MAP1_Init)
 <LI><a href="#[144]">MAP21_HSync</a> from nes_mapper.o(i.MAP21_HSync) referenced from nes_mapper.o(i.MAP21_Init)
 <LI><a href="#[143]">MAP21_MemoryWrite</a> from nes_mapper.o(i.MAP21_MemoryWrite) referenced from nes_mapper.o(i.MAP21_Init)
 <LI><a href="#[142]">MAP21_Reset</a> from nes_mapper.o(i.MAP21_Reset) referenced from nes_mapper.o(i.MAP21_Init)
 <LI><a href="#[146]">MAP225_MemoryWrite</a> from nes_mapper.o(i.MAP225_MemoryWrite) referenced from nes_mapper.o(i.MAP225_Init)
 <LI><a href="#[145]">MAP225_Reset</a> from nes_mapper.o(i.MAP225_Reset) referenced from nes_mapper.o(i.MAP225_Init)
 <LI><a href="#[148]">MAP227_MemoryWrite</a> from nes_mapper.o(i.MAP227_MemoryWrite) referenced from nes_mapper.o(i.MAP227_Init)
 <LI><a href="#[147]">MAP227_Reset</a> from nes_mapper.o(i.MAP227_Reset) referenced from nes_mapper.o(i.MAP227_Init)
 <LI><a href="#[14a]">MAP22_MemoryWrite</a> from nes_mapper.o(i.MAP22_MemoryWrite) referenced from nes_mapper.o(i.MAP22_Init)
 <LI><a href="#[149]">MAP22_Reset</a> from nes_mapper.o(i.MAP22_Reset) referenced from nes_mapper.o(i.MAP22_Init)
 <LI><a href="#[14d]">MAP23_HSync</a> from nes_mapper.o(i.MAP23_HSync) referenced from nes_mapper.o(i.MAP23_Init)
 <LI><a href="#[14c]">MAP23_MemoryWrite</a> from nes_mapper.o(i.MAP23_MemoryWrite) referenced from nes_mapper.o(i.MAP23_Init)
 <LI><a href="#[14b]">MAP23_Reset</a> from nes_mapper.o(i.MAP23_Reset) referenced from nes_mapper.o(i.MAP23_Init)
 <LI><a href="#[14f]">MAP240_MemoryWriteLow</a> from nes_mapper.o(i.MAP240_MemoryWriteLow) referenced from nes_mapper.o(i.MAP240_Init)
 <LI><a href="#[14e]">MAP240_Reset</a> from nes_mapper.o(i.MAP240_Reset) referenced from nes_mapper.o(i.MAP240_Init)
 <LI><a href="#[151]">MAP245_MemoryWrite</a> from nes_mapper.o(i.MAP245_MemoryWrite) referenced from nes_mapper.o(i.MAP245_Init)
 <LI><a href="#[150]">MAP245_Reset</a> from nes_mapper.o(i.MAP245_Reset) referenced from nes_mapper.o(i.MAP245_Init)
 <LI><a href="#[154]">MAP24_HSync</a> from nes_mapper.o(i.MAP24_HSync) referenced from nes_mapper.o(i.MAP24_Init)
 <LI><a href="#[153]">MAP24_MemoryWrite</a> from nes_mapper.o(i.MAP24_MemoryWrite) referenced from nes_mapper.o(i.MAP24_Init)
 <LI><a href="#[152]">MAP24_Reset</a> from nes_mapper.o(i.MAP24_Reset) referenced from nes_mapper.o(i.MAP24_Init)
 <LI><a href="#[157]">MAP25_HSync</a> from nes_mapper.o(i.MAP25_HSync) referenced from nes_mapper.o(i.MAP25_Init)
 <LI><a href="#[156]">MAP25_MemoryWrite</a> from nes_mapper.o(i.MAP25_MemoryWrite) referenced from nes_mapper.o(i.MAP25_Init)
 <LI><a href="#[155]">MAP25_Reset</a> from nes_mapper.o(i.MAP25_Reset) referenced from nes_mapper.o(i.MAP25_Init)
 <LI><a href="#[159]">MAP2_MemoryWrite</a> from nes_mapper.o(i.MAP2_MemoryWrite) referenced from nes_mapper.o(i.MAP2_Init)
 <LI><a href="#[158]">MAP2_Reset</a> from nes_mapper.o(i.MAP2_Reset) referenced from nes_mapper.o(i.MAP2_Init)
 <LI><a href="#[15b]">MAP32_MemoryWrite</a> from nes_mapper.o(i.MAP32_MemoryWrite) referenced from nes_mapper.o(i.MAP32_Init)
 <LI><a href="#[15a]">MAP32_Reset</a> from nes_mapper.o(i.MAP32_Reset) referenced from nes_mapper.o(i.MAP32_Init)
 <LI><a href="#[15e]">MAP33_HSync</a> from nes_mapper.o(i.MAP33_HSync) referenced from nes_mapper.o(i.MAP33_Init)
 <LI><a href="#[15d]">MAP33_MemoryWrite</a> from nes_mapper.o(i.MAP33_MemoryWrite) referenced from nes_mapper.o(i.MAP33_Init)
 <LI><a href="#[15c]">MAP33_Reset</a> from nes_mapper.o(i.MAP33_Reset) referenced from nes_mapper.o(i.MAP33_Init)
 <LI><a href="#[160]">MAP34_MemoryWrite</a> from nes_mapper.o(i.MAP34_MemoryWrite) referenced from nes_mapper.o(i.MAP34_Init)
 <LI><a href="#[15f]">MAP34_Reset</a> from nes_mapper.o(i.MAP34_Reset) referenced from nes_mapper.o(i.MAP34_Init)
 <LI><a href="#[162]">MAP3_MemoryWrite</a> from nes_mapper.o(i.MAP3_MemoryWrite) referenced from nes_mapper.o(i.MAP3_Init)
 <LI><a href="#[161]">MAP3_Reset</a> from nes_mapper.o(i.MAP3_Reset) referenced from nes_mapper.o(i.MAP3_Init)
 <LI><a href="#[165]">MAP4_HSync</a> from nes_mapper.o(i.MAP4_HSync) referenced from nes_mapper.o(i.MAP4_Init)
 <LI><a href="#[164]">MAP4_MemoryWrite</a> from nes_mapper.o(i.MAP4_MemoryWrite) referenced from nes_mapper.o(i.MAP4_Init)
 <LI><a href="#[163]">MAP4_Reset</a> from nes_mapper.o(i.MAP4_Reset) referenced from nes_mapper.o(i.MAP4_Init)
 <LI><a href="#[168]">MAP64_HSync</a> from nes_mapper.o(i.MAP64_HSync) referenced from nes_mapper.o(i.MAP64_Init)
 <LI><a href="#[167]">MAP64_MemoryWrite</a> from nes_mapper.o(i.MAP64_MemoryWrite) referenced from nes_mapper.o(i.MAP64_Init)
 <LI><a href="#[166]">MAP64_Reset</a> from nes_mapper.o(i.MAP64_Reset) referenced from nes_mapper.o(i.MAP64_Init)
 <LI><a href="#[16b]">MAP65_HSync</a> from nes_mapper.o(i.MAP65_HSync) referenced from nes_mapper.o(i.MAP65_Init)
 <LI><a href="#[16a]">MAP65_MemoryWrite</a> from nes_mapper.o(i.MAP65_MemoryWrite) referenced from nes_mapper.o(i.MAP65_Init)
 <LI><a href="#[169]">MAP65_Reset</a> from nes_mapper.o(i.MAP65_Reset) referenced from nes_mapper.o(i.MAP65_Init)
 <LI><a href="#[16d]">MAP66_MemoryWrite</a> from nes_mapper.o(i.MAP66_MemoryWrite) referenced from nes_mapper.o(i.MAP66_Init)
 <LI><a href="#[16c]">MAP66_Reset</a> from nes_mapper.o(i.MAP66_Reset) referenced from nes_mapper.o(i.MAP66_Init)
 <LI><a href="#[170]">MAP67_HSync</a> from nes_mapper.o(i.MAP67_HSync) referenced from nes_mapper.o(i.MAP67_Init)
 <LI><a href="#[16f]">MAP67_MemoryWrite</a> from nes_mapper.o(i.MAP67_MemoryWrite) referenced from nes_mapper.o(i.MAP67_Init)
 <LI><a href="#[16e]">MAP67_Reset</a> from nes_mapper.o(i.MAP67_Reset) referenced from nes_mapper.o(i.MAP67_Init)
 <LI><a href="#[173]">MAP69_HSync</a> from nes_mapper.o(i.MAP69_HSync) referenced from nes_mapper.o(i.MAP69_Init)
 <LI><a href="#[172]">MAP69_MemoryWrite</a> from nes_mapper.o(i.MAP69_MemoryWrite) referenced from nes_mapper.o(i.MAP69_Init)
 <LI><a href="#[171]">MAP69_Reset</a> from nes_mapper.o(i.MAP69_Reset) referenced from nes_mapper.o(i.MAP69_Init)
 <LI><a href="#[176]">MAP6_HSync</a> from nes_mapper.o(i.MAP6_HSync) referenced from nes_mapper.o(i.MAP6_Init)
 <LI><a href="#[175]">MAP6_MemoryWrite</a> from nes_mapper.o(i.MAP6_MemoryWrite) referenced from nes_mapper.o(i.MAP6_Init)
 <LI><a href="#[177]">MAP6_MemoryWriteLow</a> from nes_mapper.o(i.MAP6_MemoryWriteLow) referenced from nes_mapper.o(i.MAP6_Init)
 <LI><a href="#[174]">MAP6_Reset</a> from nes_mapper.o(i.MAP6_Reset) referenced from nes_mapper.o(i.MAP6_Init)
 <LI><a href="#[179]">MAP70_MemoryWrite</a> from nes_mapper.o(i.MAP70_MemoryWrite) referenced from nes_mapper.o(i.MAP70_Init)
 <LI><a href="#[178]">MAP70_Reset</a> from nes_mapper.o(i.MAP70_Reset) referenced from nes_mapper.o(i.MAP70_Init)
 <LI><a href="#[17b]">MAP71_MemoryWrite</a> from nes_mapper.o(i.MAP71_MemoryWrite) referenced from nes_mapper.o(i.MAP71_Init)
 <LI><a href="#[17a]">MAP71_Reset</a> from nes_mapper.o(i.MAP71_Reset) referenced from nes_mapper.o(i.MAP71_Init)
 <LI><a href="#[17d]">MAP72_MemoryWrite</a> from nes_mapper.o(i.MAP72_MemoryWrite) referenced from nes_mapper.o(i.MAP72_Init)
 <LI><a href="#[17c]">MAP72_Reset</a> from nes_mapper.o(i.MAP72_Reset) referenced from nes_mapper.o(i.MAP72_Init)
 <LI><a href="#[180]">MAP73_HSync</a> from nes_mapper.o(i.MAP73_HSync) referenced from nes_mapper.o(i.MAP73_Init)
 <LI><a href="#[17f]">MAP73_MemoryWrite</a> from nes_mapper.o(i.MAP73_MemoryWrite) referenced from nes_mapper.o(i.MAP73_Init)
 <LI><a href="#[17e]">MAP73_Reset</a> from nes_mapper.o(i.MAP73_Reset) referenced from nes_mapper.o(i.MAP73_Init)
 <LI><a href="#[182]">MAP75_MemoryWrite</a> from nes_mapper.o(i.MAP75_MemoryWrite) referenced from nes_mapper.o(i.MAP75_Init)
 <LI><a href="#[181]">MAP75_Reset</a> from nes_mapper.o(i.MAP75_Reset) referenced from nes_mapper.o(i.MAP75_Init)
 <LI><a href="#[184]">MAP76_MemoryWrite</a> from nes_mapper.o(i.MAP76_MemoryWrite) referenced from nes_mapper.o(i.MAP76_Init)
 <LI><a href="#[183]">MAP76_Reset</a> from nes_mapper.o(i.MAP76_Reset) referenced from nes_mapper.o(i.MAP76_Init)
 <LI><a href="#[186]">MAP78_MemoryWrite</a> from nes_mapper.o(i.MAP78_MemoryWrite) referenced from nes_mapper.o(i.MAP78_Init)
 <LI><a href="#[185]">MAP78_Reset</a> from nes_mapper.o(i.MAP78_Reset) referenced from nes_mapper.o(i.MAP78_Init)
 <LI><a href="#[188]">MAP79_MemoryWriteLow</a> from nes_mapper.o(i.MAP79_MemoryWriteLow) referenced from nes_mapper.o(i.MAP79_Init)
 <LI><a href="#[187]">MAP79_Reset</a> from nes_mapper.o(i.MAP79_Reset) referenced from nes_mapper.o(i.MAP79_Init)
 <LI><a href="#[18a]">MAP7_MemoryWrite</a> from nes_mapper.o(i.MAP7_MemoryWrite) referenced from nes_mapper.o(i.MAP7_Init)
 <LI><a href="#[189]">MAP7_Reset</a> from nes_mapper.o(i.MAP7_Reset) referenced from nes_mapper.o(i.MAP7_Init)
 <LI><a href="#[18d]">MAP85_HSync</a> from nes_mapper.o(i.MAP85_HSync) referenced from nes_mapper.o(i.MAP85_Init)
 <LI><a href="#[18c]">MAP85_MemoryWrite</a> from nes_mapper.o(i.MAP85_MemoryWrite) referenced from nes_mapper.o(i.MAP85_Init)
 <LI><a href="#[18b]">MAP85_Reset</a> from nes_mapper.o(i.MAP85_Reset) referenced from nes_mapper.o(i.MAP85_Init)
 <LI><a href="#[18f]">MAP87_MemoryWrite</a> from nes_mapper.o(i.MAP87_MemoryWrite) referenced from nes_mapper.o(i.MAP87_Init)
 <LI><a href="#[18e]">MAP87_Reset</a> from nes_mapper.o(i.MAP87_Reset) referenced from nes_mapper.o(i.MAP87_Init)
 <LI><a href="#[191]">MAP88_MemoryWrite</a> from nes_mapper.o(i.MAP88_MemoryWrite) referenced from nes_mapper.o(i.MAP88_Init)
 <LI><a href="#[190]">MAP88_Reset</a> from nes_mapper.o(i.MAP88_Reset) referenced from nes_mapper.o(i.MAP88_Init)
 <LI><a href="#[193]">MAP8_MemoryWrite</a> from nes_mapper.o(i.MAP8_MemoryWrite) referenced from nes_mapper.o(i.MAP8_Init)
 <LI><a href="#[192]">MAP8_Reset</a> from nes_mapper.o(i.MAP8_Reset) referenced from nes_mapper.o(i.MAP8_Init)
 <LI><a href="#[194]">MAP99_Reset</a> from nes_mapper.o(i.MAP99_Reset) referenced from nes_mapper.o(i.MAP99_Init)
 <LI><a href="#[195]">MAP99_WriteHighRegs</a> from nes_mapper.o(i.MAP99_WriteHighRegs) referenced from nes_mapper.o(i.MAP99_Init)
 <LI><a href="#[19b]">Mapper_HSync</a> from nes_mapper.o(i.Mapper_HSync) referenced from nes_mapper.o(i.Mapper_Init)
 <LI><a href="#[198]">Mapper_Read</a> from nes_mapper.o(i.Mapper_Read) referenced from nes_mapper.o(i.Mapper_Init)
 <LI><a href="#[19a]">Mapper_ReadLow</a> from nes_mapper.o(i.Mapper_ReadLow) referenced from nes_mapper.o(i.Mapper_Init)
 <LI><a href="#[196]">Mapper_Reset</a> from nes_mapper.o(i.Mapper_Reset) referenced from nes_mapper.o(i.Mapper_Init)
 <LI><a href="#[19c]">Mapper_VSync</a> from nes_mapper.o(i.Mapper_VSync) referenced from nes_mapper.o(i.Mapper_Init)
 <LI><a href="#[1a6]">Mapper_W</a> from 6502.o(rom_code) referenced from 6502.o(rom_code)
 <LI><a href="#[197]">Mapper_Write</a> from nes_mapper.o(i.Mapper_Write) referenced from nes_mapper.o(i.Mapper_Init)
 <LI><a href="#[199]">Mapper_WriteLow</a> from nes_mapper.o(i.Mapper_WriteLow) referenced from nes_mapper.o(i.Mapper_Init)
 <LI><a href="#[28]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[26]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[72]">OTG_FS_IRQHandler</a> from stm32f4xx_it.o(i.OTG_FS_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7a]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[79]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7c]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7b]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[18]">PPU_R</a> from 6502.o(CPU_GPU) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[20]">PPU_W</a> from 6502.o(CPU_GPU) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[30]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">PendSV_Handler</a> from stm32f4xx_it.o(i.PendSV_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">RTC_Alarm_IRQHandler</a> from stm32f4xx_it.o(i.RTC_Alarm_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[32]">RTC_WKUP_IRQHandler</a> from stm32f4xx_it.o(i.RTC_WKUP_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[60]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">SPI1_IRQHandler</a> from stm32f4xx_it.o(i.SPI1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[62]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[121]">SPI_DMAAbortOnError</a> from stm32f4xx_hal_spi.o(i.SPI_DMAAbortOnError) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_IRQHandler)
 <LI><a href="#[124]">SPI_DMAError</a> from stm32f4xx_hal_spi.o(i.SPI_DMAError) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
 <LI><a href="#[122]">SPI_DMAHalfTransmitCplt</a> from stm32f4xx_hal_spi.o(i.SPI_DMAHalfTransmitCplt) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
 <LI><a href="#[123]">SPI_DMATransmitCplt</a> from stm32f4xx_hal_spi.o(i.SPI_DMATransmitCplt) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
 <LI><a href="#[8]">STORAGE_GetCapacity_FS</a> from usbd_storage_if.o(i.STORAGE_GetCapacity_FS) referenced 2 times from usbd_storage_if.o(.data)
 <LI><a href="#[d]">STORAGE_GetMaxLun_FS</a> from usbd_storage_if.o(i.STORAGE_GetMaxLun_FS) referenced 2 times from usbd_storage_if.o(.data)
 <LI><a href="#[7]">STORAGE_Init_FS</a> from usbd_storage_if.o(i.STORAGE_Init_FS) referenced 2 times from usbd_storage_if.o(.data)
 <LI><a href="#[9]">STORAGE_IsReady_FS</a> from usbd_storage_if.o(i.STORAGE_IsReady_FS) referenced 2 times from usbd_storage_if.o(.data)
 <LI><a href="#[a]">STORAGE_IsWriteProtected_FS</a> from usbd_storage_if.o(i.STORAGE_IsWriteProtected_FS) referenced 2 times from usbd_storage_if.o(.data)
 <LI><a href="#[b]">STORAGE_Read_FS</a> from usbd_storage_if.o(i.STORAGE_Read_FS) referenced 2 times from usbd_storage_if.o(.data)
 <LI><a href="#[c]">STORAGE_Write_FS</a> from usbd_storage_if.o(i.STORAGE_Write_FS) referenced 2 times from usbd_storage_if.o(.data)
 <LI><a href="#[2b]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[81]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[31]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">TIM1_UP_TIM10_IRQHandler</a> from stm32f4xx_it.o(i.TIM1_UP_TIM10_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">TIM2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">TIM3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">TIM4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[61]">TIM5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[65]">TIM6_DAC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[66]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5d]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5c]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5b]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[63]">UART4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[64]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">USART1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">USART2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">USART3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[76]">USART6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5]">USBD_FS_ConfigStrDescriptor</a> from usbd_desc.o(i.USBD_FS_ConfigStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[0]">USBD_FS_DeviceDescriptor</a> from usbd_desc.o(i.USBD_FS_DeviceDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[6]">USBD_FS_InterfaceStrDescriptor</a> from usbd_desc.o(i.USBD_FS_InterfaceStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[1]">USBD_FS_LangIDStrDescriptor</a> from usbd_desc.o(i.USBD_FS_LangIDStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[2]">USBD_FS_ManufacturerStrDescriptor</a> from usbd_desc.o(i.USBD_FS_ManufacturerStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[3]">USBD_FS_ProductStrDescriptor</a> from usbd_desc.o(i.USBD_FS_ProductStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[4]">USBD_FS_SerialStrDescriptor</a> from usbd_desc.o(i.USBD_FS_SerialStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[11]">USBD_MSC_DataIn</a> from usbd_msc.o(i.USBD_MSC_DataIn) referenced 2 times from usbd_msc.o(.data)
 <LI><a href="#[12]">USBD_MSC_DataOut</a> from usbd_msc.o(i.USBD_MSC_DataOut) referenced 2 times from usbd_msc.o(.data)
 <LI><a href="#[f]">USBD_MSC_DeInit</a> from usbd_msc.o(i.USBD_MSC_DeInit) referenced 2 times from usbd_msc.o(.data)
 <LI><a href="#[16]">USBD_MSC_GetDeviceQualifierDescriptor</a> from usbd_msc.o(i.USBD_MSC_GetDeviceQualifierDescriptor) referenced 2 times from usbd_msc.o(.data)
 <LI><a href="#[14]">USBD_MSC_GetFSCfgDesc</a> from usbd_msc.o(i.USBD_MSC_GetFSCfgDesc) referenced 2 times from usbd_msc.o(.data)
 <LI><a href="#[13]">USBD_MSC_GetHSCfgDesc</a> from usbd_msc.o(i.USBD_MSC_GetHSCfgDesc) referenced 2 times from usbd_msc.o(.data)
 <LI><a href="#[15]">USBD_MSC_GetOtherSpeedCfgDesc</a> from usbd_msc.o(i.USBD_MSC_GetOtherSpeedCfgDesc) referenced 2 times from usbd_msc.o(.data)
 <LI><a href="#[e]">USBD_MSC_Init</a> from usbd_msc.o(i.USBD_MSC_Init) referenced 2 times from usbd_msc.o(.data)
 <LI><a href="#[10]">USBD_MSC_Setup</a> from usbd_msc.o(i.USBD_MSC_Setup) referenced 2 times from usbd_msc.o(.data)
 <LI><a href="#[2a]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2f]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[83]">_00</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[84]">_01</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[86]">_03</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[87]">_05</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[88]">_06</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[89]">_07</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[8a]">_08</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[8b]">_09</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[8c]">_0A</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[8d]">_0D</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[8e]">_0E</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[8f]">_10</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[90]">_11</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[91]">_14</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[92]">_15</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[93]">_16</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[94]">_18</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[95]">_19</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[96]">_1D</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[97]">_1E</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[98]">_20</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[99]">_21</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[9a]">_24</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[9b]">_25</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[9c]">_26</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[9d]">_28</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[9e]">_29</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[9f]">_2A</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[a0]">_2C</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[a1]">_2D</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[a2]">_2E</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[a3]">_30</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[a4]">_31</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[a5]">_35</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[a6]">_36</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[a7]">_38</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[a8]">_39</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[a9]">_3D</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[aa]">_3E</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[ab]">_40</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[ac]">_41</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[ad]">_45</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[ae]">_46</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[af]">_48</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[b0]">_49</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[b1]">_4A</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[b2]">_4C</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[b3]">_4D</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[b4]">_4E</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[b5]">_50</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[b6]">_51</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[b7]">_55</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[b8]">_56</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[b9]">_58</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[ba]">_59</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[bb]">_5D</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[bc]">_5E</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[bd]">_60</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[be]">_61</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[bf]">_65</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[c0]">_66</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[c1]">_67</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[c2]">_68</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[c3]">_69</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[c4]">_6A</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[c5]">_6C</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[c6]">_6D</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[c7]">_6E</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[c8]">_70</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[c9]">_71</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[ca]">_75</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[cb]">_76</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[cc]">_78</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[cd]">_79</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[ce]">_7D</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[cf]">_7E</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[d0]">_81</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[d1]">_84</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[d2]">_85</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[d3]">_86</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[d4]">_88</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[d5]">_8A</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[d6]">_8C</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[d7]">_8D</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[d8]">_8E</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[d9]">_90</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[da]">_91</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[db]">_94</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[dc]">_95</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[dd]">_96</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[de]">_98</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[df]">_99</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[e0]">_9A</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[e1]">_9D</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[e2]">_A0</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[e3]">_A1</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[e4]">_A2</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[e5]">_A4</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[e6]">_A5</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[e7]">_A6</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[e8]">_A8</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[e9]">_A9</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[ea]">_AA</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[eb]">_AC</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[ec]">_AD</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[ed]">_AE</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[ee]">_B0</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[ef]">_B1</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[f0]">_B4</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[f1]">_B5</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[f2]">_B6</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[f3]">_B8</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[f4]">_B9</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[f5]">_BA</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[f6]">_BC</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[f7]">_BD</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[f8]">_BE</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[f9]">_C0</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[fa]">_C1</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[fb]">_C4</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[fc]">_C5</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[fd]">_C6</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[fe]">_C8</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[ff]">_C9</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[100]">_CA</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[101]">_CC</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[102]">_CD</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[103]">_CE</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[104]">_D0</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[105]">_D1</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[106]">_D5</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[107]">_D6</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[108]">_D8</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[109]">_D9</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[10a]">_DD</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[10b]">_DE</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[10c]">_E0</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[10d]">_E1</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[10e]">_E4</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[10f]">_E5</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[110]">_E6</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[111]">_E8</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[112]">_E9</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[113]">_EA</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[114]">_EC</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[115]">_ED</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[116]">_EE</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[117]">_F0</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[118]">_F1</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[119]">_F5</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[11a]">_F6</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[11b]">_F8</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[11c]">_F9</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[11d]">_FB</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[11e]">_FD</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[11f]">_FE</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[120]">_FF</a> from 6502.o(cpu_code) referenced from 6502.o(cpu_code)
 <LI><a href="#[82]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[85]">_xx</a> from 6502.o(cpu_code) referenced 99 times from 6502.o(cpu_code)
 <LI><a href="#[19e]">apu_4015R</a> from 6502.o(io_code) referenced from 6502.o(io_code)
 <LI><a href="#[1a3]">apu_4015w</a> from 6502.o(io_code) referenced from 6502.o(io_code)
 <LI><a href="#[1a5]">apu_4017w</a> from 6502.o(io_code) referenced from 6502.o(io_code)
 <LI><a href="#[1a1]">apu_w</a> from 6502.o(io_code) referenced 20 times from 6502.o(io_code)
 <LI><a href="#[1a2]">dma_W</a> from 6502.o(io_code) referenced from 6502.o(io_code)
 <LI><a href="#[24]">exit_run</a> from 6502.o(cpu_run) referenced from 6502.o(cpu_run)
 <LI><a href="#[24]">exit_run</a> from 6502.o(cpu_run) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[19d]">fputc</a> from uart.o(i.fputc) referenced from printf1.o(i.__0printf$1)
 <LI><a href="#[125]">in_func</a> from jpeg.o(i.in_func) referenced from jpeg.o(i.JPEG_Code)
 <LI><a href="#[19f]">joy0_R</a> from 6502.o(io_code) referenced from 6502.o(io_code)
 <LI><a href="#[1a4]">joy0_W</a> from 6502.o(io_code) referenced from 6502.o(io_code)
 <LI><a href="#[1a0]">joy1_R</a> from 6502.o(io_code) referenced from 6502.o(io_code)
 <LI><a href="#[80]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[126]">out_func</a> from jpeg.o(i.out_func) referenced from jpeg.o(i.JPEG_Code)
 <LI><a href="#[17]">ram_R</a> from 6502.o(rwram_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[1f]">ram_W</a> from 6502.o(rwram_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[1b]">rom_R80</a> from 6502.o(rwram_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[1c]">rom_RA0</a> from 6502.o(rwram_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[1d]">rom_RC0</a> from 6502.o(rwram_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[1e]">rom_RE0</a> from 6502.o(rwram_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[1a]">sram_R</a> from 6502.o(rwram_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[22]">sram_W</a> from 6502.o(rwram_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[23]">void</a> from 6502.o(rwram_code) referenced 8 times from 6502.o(wram_globals0)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[82]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[3cf]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[1a7]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1b9]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3d0]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[3d1]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[3d2]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[3d3]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[3d4]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[25]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a9]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[3ab]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[1da]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fatfs_File_Scan
</UL>

<P><STRONG><a name="[3d5]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[3d6]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3d7]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1ac]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_load
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[1e6]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_MspInit
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_reset
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_init
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_load
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_load
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_prepare
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_scanline_and_draw
</UL>

<P><STRONG><a name="[3d8]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[385]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[379]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[1c7]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Game_Init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calendar_Init
</UL>

<P><STRONG><a name="[1d9]"></a>strrchr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fatfs_File_Scan
</UL>

<P><STRONG><a name="[1af]"></a>strcasecmp</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, strcasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fatfs_File_Scan
</UL>

<P><STRONG><a name="[1b1]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_build_luts
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_Run
</UL>

<P><STRONG><a name="[1b3]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_setparams
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_Run
</UL>

<P><STRONG><a name="[1b5]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_build_luts
</UL>

<P><STRONG><a name="[1b6]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_Run
</UL>

<P><STRONG><a name="[1b7]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_setparams
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_build_luts
</UL>

<P><STRONG><a name="[1b8]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_Run
</UL>

<P><STRONG><a name="[373]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_setparams
</UL>

<P><STRONG><a name="[3d9]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[363]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1ab]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[3da]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[1aa]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[3db]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>

<P><STRONG><a name="[3dc]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[1b4]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1b2]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[1a8]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[3dd]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[3de]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[3df]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1be]"></a>run6502</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, 6502.o(cpu_run))
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI6502
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_emulate_frame
</UL>

<P><STRONG><a name="[1bf]"></a>NMI6502</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, 6502.o(cpu_run))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run6502
</UL>

<P><STRONG><a name="[3cd]"></a>CPU_reset</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, 6502.o(cpu_run))
<BR><BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu6502_init
</UL>

<P><STRONG><a name="[3cc]"></a>Apu_Read4015</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, nes_apu.o(i.Apu_Read4015))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_4015R
</UL>

<P><STRONG><a name="[1c0]"></a>Apu_Write</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nes_apu.o(i.Apu_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Apu_Write &rArr; apu_enqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_w
</UL>

<P><STRONG><a name="[1c2]"></a>Apu_Write4015</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nes_apu.o(i.Apu_Write4015))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Apu_Write4015 &rArr; apu_enqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_4015w
</UL>

<P><STRONG><a name="[3cb]"></a>Apu_Write4017</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nes_apu.o(i.Apu_Write4017))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_4017w
</UL>

<P><STRONG><a name="[29]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c3]"></a>Calendar_Clock</STRONG> (Thumb, 246 bytes, Stack size 48 bytes, calendar.o(i.Calendar_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Calendar_Clock &rArr; LCD_ShowNums &rArr; LCD_ShowNum &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_WR_DATA_16Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNums
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calendar_Run
</UL>

<P><STRONG><a name="[24c]"></a>Calendar_Clock_Cnt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, calendar.o(i.Calendar_Clock_Cnt))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_WakeUpTimerEventCallback
</UL>

<P><STRONG><a name="[1c6]"></a>Calendar_Init</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, calendar.o(i.Calendar_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Calendar_Init &rArr; Calendar_Run &rArr; Calendar_Clock &rArr; LCD_ShowNums &rArr; LCD_ShowNum &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_WR_DATA_16Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calendar_Run
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calendar_List_View
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Del
</UL>

<P><STRONG><a name="[1c8]"></a>Calendar_List_View</STRONG> (Thumb, 480 bytes, Stack size 32 bytes, calendar.o(i.Calendar_List_View))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Calendar_List_View &rArr; Gui_DrawFont_GBK16 &rArr; LCD_DrawPoint &rArr; LCD_WR_DATA_16Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_DrawFont_GBK16
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calendar_Init
</UL>

<P><STRONG><a name="[1cb]"></a>Calendar_Run</STRONG> (Thumb, 2330 bytes, Stack size 48 bytes, calendar.o(i.Calendar_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Calendar_Run &rArr; Calendar_Clock &rArr; LCD_ShowNums &rArr; LCD_ShowNum &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_WR_DATA_16Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNums
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_DrawFont_GBK16
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calendar_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calendar_Init
</UL>

<P><STRONG><a name="[40]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA1_Stream6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream6_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA2_Stream0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream0_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA2_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream3_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1ec]"></a>Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_MspInit
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_SetPlay_SamplesPerSec
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_SetPlay_SamplesPerSec
</UL>

<P><STRONG><a name="[1f4]"></a>FLASH_Erase_Sector</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_Erase_Sector))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[1f5]"></a>FLASH_FlushCaches</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_FlushCaches))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[1d3]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_EraseFlashSector
</UL>

<P><STRONG><a name="[1d6]"></a>Fatfs_File_Scan</STRONG> (Thumb, 144 bytes, Stack size 352 bytes, fatfs.o(i.Fatfs_File_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = Fatfs_File_Scan &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_FatFs_Write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Seek
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Game_Init
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_Init
</UL>

<P><STRONG><a name="[1dc]"></a>Game_Init</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, game.o(i.Game_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1556<LI>Call Chain = Game_Init &rArr; nes_load &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_FatFs_Write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_Stop
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_Start
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_GetState
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_load
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Game_List_View
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fatfs_File_Scan
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Del
</UL>

<P><STRONG><a name="[1de]"></a>Game_List_View</STRONG> (Thumb, 480 bytes, Stack size 32 bytes, game.o(i.Game_List_View))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Game_List_View &rArr; Gui_DrawFont_GBK16 &rArr; LCD_DrawPoint &rArr; LCD_WR_DATA_16Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_DrawFont_GBK16
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Game_Init
</UL>

<P><STRONG><a name="[1cc]"></a>Gui_DrawFont_GBK16</STRONG> (Thumb, 364 bytes, Stack size 60 bytes, st7789.o(i.Gui_DrawFont_GBK16))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Gui_DrawFont_GBK16 &rArr; LCD_DrawPoint &rArr; LCD_WR_DATA_16Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_main
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Game_List_View
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calendar_Run
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calendar_List_View
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Init
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_Run
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_ListView
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_Init
</UL>

<P><STRONG><a name="[2c5]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[3b6]"></a>HAL_ADC_GetState</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_main
</UL>

<P><STRONG><a name="[3b7]"></a>HAL_ADC_GetValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_GetValue))
<BR><BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_main
</UL>

<P><STRONG><a name="[1e3]"></a>HAL_ADC_Init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[1e4]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, adc.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[1e8]"></a>HAL_ADC_PollForConversion</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_PollForConversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_PollForConversion
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_main
</UL>

<P><STRONG><a name="[3b5]"></a>HAL_ADC_Start</STRONG> (Thumb, 228 bytes, Stack size 12 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_ADC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_main
</UL>

<P><STRONG><a name="[2c7]"></a>HAL_DAC_ConfigChannel</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f4xx_hal_dac.o(i.HAL_DAC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DAC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init
</UL>

<P><STRONG><a name="[1e9]"></a>HAL_DAC_Init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f4xx_hal_dac.o(i.HAL_DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_DAC_Init &rArr; HAL_DAC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init
</UL>

<P><STRONG><a name="[1ea]"></a>HAL_DAC_MspInit</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, dac.o(i.HAL_DAC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_DAC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_Init
</UL>

<P><STRONG><a name="[277]"></a>HAL_DAC_SetValue</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, stm32f4xx_hal_dac.o(i.HAL_DAC_SetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_DAC_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_Play
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_Play
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[1dd]"></a>HAL_DAC_Start</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f4xx_hal_dac.o(i.HAL_DAC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DAC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Game_Init
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_Init
</UL>

<P><STRONG><a name="[1df]"></a>HAL_DAC_Stop</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_hal_dac.o(i.HAL_DAC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DAC_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Game_Init
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_Init
</UL>

<P><STRONG><a name="[259]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>

<P><STRONG><a name="[1e1]"></a>HAL_DMA_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Game_Init
</UL>

<P><STRONG><a name="[1d2]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 412 bytes, Stack size 32 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream3_IRQHandler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream0_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream6_IRQHandler
</UL>

<P><STRONG><a name="[1eb]"></a>HAL_DMA_Init</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_Init &rArr; DMA_CheckFifoParam
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_MspInit
</UL>

<P><STRONG><a name="[1ef]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit_DMA
</UL>

<P><STRONG><a name="[1f1]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_main
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789_Init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
</UL>

<P><STRONG><a name="[1f2]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, stm32f4xx_hal_flash_ex.o(i.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FlushCaches
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_Sector
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_EraseFlashSector
</UL>

<P><STRONG><a name="[281]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_WFlash
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_EraseFlashSector
</UL>

<P><STRONG><a name="[1f6]"></a>HAL_FLASH_Program</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Word
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_HalfWord
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_DoubleWord
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_WFlash
</UL>

<P><STRONG><a name="[27f]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_WFlash
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_EraseFlashSector
</UL>

<P><STRONG><a name="[1e7]"></a>HAL_GPIO_Init</STRONG> (Thumb, 450 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_MspInit
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
</UL>

<P><STRONG><a name="[2ca]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[1d4]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[326]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1fb]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1fd]"></a>HAL_InitTick</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1fe]"></a>HAL_MspInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[23b]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
</UL>

<P><STRONG><a name="[200]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[1fc]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[22b]"></a>HAL_PCDEx_LPM_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_pcd_ex.o(i.HAL_PCDEx_LPM_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[33b]"></a>HAL_PCDEx_SetRxFiFo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_pcd_ex.o(i.HAL_PCDEx_SetRxFiFo))
<BR><BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[33c]"></a>HAL_PCDEx_SetTxFiFo</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, stm32f4xx_hal_pcd_ex.o(i.HAL_PCDEx_SetTxFiFo))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_PCDEx_SetTxFiFo
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[202]"></a>HAL_PCD_ConnectCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_ConnectCallback))
<BR><BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DevConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[204]"></a>HAL_PCD_DataInStageCallback</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_DataInStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_PCD_DataInStageCallback &rArr; USBD_LL_DataInStage &rArr; USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[206]"></a>HAL_PCD_DataOutStageCallback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_DataOutStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_PCD_DataOutStageCallback &rArr; USBD_LL_DataOutStage &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutXfrComplete_int
</UL>

<P><STRONG><a name="[208]"></a>HAL_PCD_DisconnectCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_DisconnectCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_DisconnectCallback &rArr; USBD_LL_DevDisconnected
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DevDisconnected
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[20a]"></a>HAL_PCD_EP_Abort</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_EP_Abort &rArr; USB_EPStopXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStopXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[20c]"></a>HAL_PCD_EP_Close</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeactivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
</UL>

<P><STRONG><a name="[20e]"></a>HAL_PCD_EP_ClrStall</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_ClrStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_EP_ClrStall
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
</UL>

<P><STRONG><a name="[210]"></a>HAL_PCD_EP_Flush</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_PCD_EP_Flush &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_FlushEP
</UL>

<P><STRONG><a name="[33a]"></a>HAL_PCD_EP_GetRxCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_GetRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_GetRxDataSize
</UL>

<P><STRONG><a name="[213]"></a>HAL_PCD_EP_Open</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>

<P><STRONG><a name="[215]"></a>HAL_PCD_EP_Receive</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>

<P><STRONG><a name="[218]"></a>HAL_PCD_EP_SetStall</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_SetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PCD_EP_SetStall &rArr; USB_EP0_OutStart
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPSetStall
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>

<P><STRONG><a name="[21b]"></a>HAL_PCD_EP_Transmit</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>

<P><STRONG><a name="[21c]"></a>HAL_PCD_IRQHandler</STRONG> (Thumb, 1376 bytes, Stack size 48 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HAL_PCD_IRQHandler &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetTurnaroundTime
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadPacket
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadInterrupts
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevOutEPInterrupt
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevInEPInterrupt
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevAllOutEpInterrupt
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevAllInEpInterrupt
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetMode
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetDevSpeed
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ActivateSetup
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_LPM_Callback
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Abort
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteEmptyTxFifo
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutXfrComplete_int
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOOUTIncompleteCallback
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOINIncompleteCallback
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DisconnectCallback
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ConnectCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[227]"></a>HAL_PCD_ISOINIncompleteCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_ISOINIncompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_ISOINIncompleteCallback &rArr; USBD_LL_IsoINIncomplete
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsoINIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[224]"></a>HAL_PCD_ISOOUTIncompleteCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_ISOOUTIncompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_ISOOUTIncompleteCallback &rArr; USBD_LL_IsoOUTIncomplete
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsoOUTIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[234]"></a>HAL_PCD_Init</STRONG> (Thumb, 226 bytes, Stack size 64 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableGlobalInt
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevDisconnect
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[235]"></a>HAL_PCD_MspInit</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, usbd_conf.o(i.HAL_PCD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[230]"></a>HAL_PCD_ResetCallback</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, usbd_conf.o(i.HAL_PCD_ResetCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_PCD_ResetCallback &rArr; USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetSpeed
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[229]"></a>HAL_PCD_ResumeCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_ResumeCallback))
<BR><BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[231]"></a>HAL_PCD_SOFCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_SOFCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_SOFCallback &rArr; USBD_LL_SOF
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[240]"></a>HAL_PCD_SetAddress</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetDevAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
</UL>

<P><STRONG><a name="[223]"></a>HAL_PCD_SetupStageCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_SetupStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[243]"></a>HAL_PCD_Start</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableGlobalInt
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>

<P><STRONG><a name="[22a]"></a>HAL_PCD_SuspendCallback</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_SuspendCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_SuspendCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[247]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>

<P><STRONG><a name="[248]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[22e]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[32b]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[32a]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[249]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[24a]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 856 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[250]"></a>HAL_RTCEx_AlarmBEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc_ex.o(i.HAL_RTCEx_AlarmBEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>

<P><STRONG><a name="[2cc]"></a>HAL_RTCEx_SetWakeUpTimer_IT</STRONG> (Thumb, 236 bytes, Stack size 36 bytes, stm32f4xx_hal_rtc_ex.o(i.HAL_RTCEx_SetWakeUpTimer_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_RTCEx_SetWakeUpTimer_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[24b]"></a>HAL_RTCEx_WakeUpTimerEventCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, calendar.o(i.HAL_RTCEx_WakeUpTimerEventCallback))
<BR><BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calendar_Clock_Cnt
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_WakeUpTimerIRQHandler
</UL>

<P><STRONG><a name="[24d]"></a>HAL_RTCEx_WakeUpTimerIRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_hal_rtc_ex.o(i.HAL_RTCEx_WakeUpTimerIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTCEx_WakeUpTimerIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_WakeUpTimerEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[24f]"></a>HAL_RTC_AlarmAEventCallback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, calendar.o(i.HAL_RTC_AlarmAEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>

<P><STRONG><a name="[24e]"></a>HAL_RTC_AlarmIRQHandler</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_AlarmIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTC_AlarmIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_AlarmBEventCallback
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmAEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[1ce]"></a>HAL_RTC_GetDate</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_main
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calendar_Run
</UL>

<P><STRONG><a name="[1cd]"></a>HAL_RTC_GetTime</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_main
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calendar_Run
</UL>

<P><STRONG><a name="[252]"></a>HAL_RTC_Init</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[253]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, rtc.o(i.HAL_RTC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RTC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[1d1]"></a>HAL_RTC_SetAlarm_IT</STRONG> (Thumb, 406 bytes, Stack size 32 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_SetAlarm_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calendar_Run
</UL>

<P><STRONG><a name="[1cf]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTC_SetDate &rArr; RTC_ExitInitMode &rArr; HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calendar_Run
</UL>

<P><STRONG><a name="[1d0]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RTC_SetTime &rArr; RTC_ExitInitMode &rArr; HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calendar_Run
</UL>

<P><STRONG><a name="[257]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
</UL>

<P><STRONG><a name="[25a]"></a>HAL_SPI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAError
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAAbortOnError
</UL>

<P><STRONG><a name="[258]"></a>HAL_SPI_IRQHandler</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SPI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
</UL>

<P><STRONG><a name="[25b]"></a>HAL_SPI_Init</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[25c]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 312 bytes, Stack size 56 bytes, spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[25d]"></a>HAL_SPI_Transmit_DMA</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_SPI_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DMAPushColor
</UL>

<P><STRONG><a name="[321]"></a>HAL_SPI_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
</UL>

<P><STRONG><a name="[31f]"></a>HAL_SPI_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAHalfTransmitCplt
</UL>

<P><STRONG><a name="[1ff]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[26b]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[26d]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[2d0]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_SetPlay_SamplesPerSec
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_SetPlay_SamplesPerSec
</UL>

<P><STRONG><a name="[25e]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_SetPlay_SamplesPerSec
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_SetPlay_SamplesPerSec
</UL>

<P><STRONG><a name="[25f]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[329]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Init
</UL>

<P><STRONG><a name="[261]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_ETR_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_SetPlay_SamplesPerSec
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_SetPlay_SamplesPerSec
</UL>

<P><STRONG><a name="[267]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[266]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; WAV_Play &rArr; HAL_DAC_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>

<P><STRONG><a name="[26e]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, tim.o(i.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[268]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[26f]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC2_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[274]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[275]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[269]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[26a]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, timer.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; WAV_Play &rArr; HAL_DAC_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_SetValue
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_Play
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_Play
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[26c]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[279]"></a>HAL_UART_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[27a]"></a>HAL_UART_MspInit</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[27c]"></a>HAL_UART_Transmit</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[27]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[27e]"></a>IN_EraseFlashSector</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, in_flash.o(i.IN_EraseFlashSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IN_EraseFlashSector &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_GetFlashSector
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_load
</UL>

<P><STRONG><a name="[280]"></a>IN_GetFlashSector</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, in_flash.o(i.IN_GetFlashSector))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_EraseFlashSector
</UL>

<P><STRONG><a name="[282]"></a>IN_WFlash</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, in_flash.o(i.IN_WFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IN_WFlash &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_load
</UL>

<P><STRONG><a name="[283]"></a>JPEG_Code</STRONG> (Thumb, 128 bytes, Stack size 704 bytes, jpeg.o(i.JPEG_Code))
<BR><BR>[Stack]<UL><LI>Max Depth = 1132<LI>Call Chain = JPEG_Code &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_FatFs_Write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_prepare
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_decomp
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Seek
</UL>

<P><STRONG><a name="[289]"></a>JPEG_Seek</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, jpeg.o(i.JPEG_Seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 1156<LI>Call Chain = JPEG_Seek &rArr; JPEG_Code &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_FatFs_Write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fatfs_File_Scan
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_View
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Code
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Del
</UL>

<P><STRONG><a name="[1c9]"></a>Key_Scan</STRONG> (Thumb, 304 bytes, Stack size 16 bytes, key.o(i.Key_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Key_Scan &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_main
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Del
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calendar_Run
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Seek
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Game_Init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calendar_Init
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_Run
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_Init
</UL>

<P><STRONG><a name="[1ca]"></a>LCD_Clear</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, st7789.o(i.LCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_Clear &rArr; LCD_SetWindows &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA_16Bit
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindows
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789_Init
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Del
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Game_List_View
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calendar_List_View
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Seek
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Game_Init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calendar_Init
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Init
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_ListView
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_Init
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_View
</UL>

<P><STRONG><a name="[28d]"></a>LCD_DMAPushColor</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, st7789.o(i.LCD_DMAPushColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LCD_DMAPushColor &rArr; HAL_SPI_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanline_draw
</UL>

<P><STRONG><a name="[28e]"></a>LCD_DrawBMP</STRONG> (Thumb, 86 bytes, Stack size 28 bytes, st7789.o(i.LCD_DrawBMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_DrawBMP &rArr; LCD_SetWindows &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA_16Bit
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindows
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Init
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_Run
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_func
</UL>

<P><STRONG><a name="[28f]"></a>LCD_DrawLine</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, st7789.o(i.LCD_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LCD_DrawLine &rArr; LCD_DrawPoint &rArr; LCD_WR_DATA_16Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRoundRectangle
</UL>

<P><STRONG><a name="[1e2]"></a>LCD_DrawPoint</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, st7789.o(i.LCD_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LCD_DrawPoint &rArr; LCD_WR_DATA_16Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA_16Bit
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_DrawFont_GBK16
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRoundRectangle
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>

<P><STRONG><a name="[291]"></a>LCD_DrawRoundRectangle</STRONG> (Thumb, 592 bytes, Stack size 108 bytes, st7789.o(i.LCD_DrawRoundRectangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LCD_DrawRoundRectangle &rArr; LCD_DrawLine &rArr; LCD_DrawPoint &rArr; LCD_WR_DATA_16Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Del
</UL>

<P><STRONG><a name="[292]"></a>LCD_Fill</STRONG> (Thumb, 72 bytes, Stack size 28 bytes, st7789.o(i.LCD_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_Fill &rArr; LCD_SetWindows &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindows
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_Run
</UL>

<P><STRONG><a name="[290]"></a>LCD_SetCursor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, st7789.o(i.LCD_SetCursor))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>

<P><STRONG><a name="[28b]"></a>LCD_SetWindows</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, st7789.o(i.LCD_SetWindows))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_SetWindows &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBMP
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_set_window
</UL>

<P><STRONG><a name="[1c5]"></a>LCD_ShowChar</STRONG> (Thumb, 172 bytes, Stack size 52 bytes, st7789.o(i.LCD_ShowChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_WR_DATA_16Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_main
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNums
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calendar_Run
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calendar_Clock
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
</UL>

<P><STRONG><a name="[295]"></a>LCD_ShowNum</STRONG> (Thumb, 136 bytes, Stack size 64 bytes, st7789.o(i.LCD_ShowNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LCD_ShowNum &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_WR_DATA_16Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mypow
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNums
</UL>

<P><STRONG><a name="[1c4]"></a>LCD_ShowNums</STRONG> (Thumb, 246 bytes, Stack size 64 bytes, st7789.o(i.LCD_ShowNums))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LCD_ShowNums &rArr; LCD_ShowNum &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_WR_DATA_16Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_main
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calendar_Run
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calendar_Clock
</UL>

<P><STRONG><a name="[297]"></a>LCD_ShowString</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, st7789.o(i.LCD_ShowString))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_WR_DATA_16Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_View
</UL>

<P><STRONG><a name="[293]"></a>LCD_WR_DATA</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, st7789.o(i.LCD_WR_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_WR_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789_Init
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindows
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
</UL>

<P><STRONG><a name="[28c]"></a>LCD_WR_DATA_16Bit</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, st7789.o(i.LCD_WR_DATA_16Bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_WR_DATA_16Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBMP
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[294]"></a>LCD_WR_REG</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, st7789.o(i.LCD_WR_REG))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789_Init
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindows
</UL>

<P><STRONG><a name="[28a]"></a>List_View</STRONG> (Thumb, 662 bytes, Stack size 56 bytes, jpeg.o(i.List_View))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = List_View &rArr; LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_WR_DATA_16Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Seek
</UL>

<P><STRONG><a name="[2d9]"></a>MAP0_Init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP0_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[127]"></a>MAP0_Reset</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP0_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP0_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP0_Init)
</UL>
<P><STRONG><a name="[301]"></a>MAP113_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP113_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[129]"></a>MAP113_MemoryWrite</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, nes_mapper.o(i.MAP113_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = MAP113_MemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapEF_
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP113_Init)
</UL>
<P><STRONG><a name="[12a]"></a>MAP113_MemoryWriteLow</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP113_MemoryWriteLow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = MAP113_MemoryWriteLow
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapEF_
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP113_Init)
</UL>
<P><STRONG><a name="[128]"></a>MAP113_Reset</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP113_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP113_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP113_Init)
</UL>
<P><STRONG><a name="[2e1]"></a>MAP11_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP11_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[12c]"></a>MAP11_MemoryWrite</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP11_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = MAP11_MemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapEF_
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP11_Init)
</UL>
<P><STRONG><a name="[12b]"></a>MAP11_Reset</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP11_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP11_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP11_Init)
</UL>
<P><STRONG><a name="[2e2]"></a>MAP13_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP13_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[12e]"></a>MAP13_MemoryWrite</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP13_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = MAP13_MemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapEF_
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_VRAM_bank
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP13_Init)
</UL>
<P><STRONG><a name="[12d]"></a>MAP13_Reset</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP13_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MAP13_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_VRAM_bank
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP13_Init)
</UL>
<P><STRONG><a name="[2e3]"></a>MAP15_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP15_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[130]"></a>MAP15_MemoryWrite</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP15_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = MAP15_MemoryWrite &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapEF_
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP15_Init)
</UL>
<P><STRONG><a name="[12f]"></a>MAP15_Reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP15_Reset))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP15_Init)
</UL>
<P><STRONG><a name="[133]"></a>MAP16_HSync</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP16_HSync))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP16_Init)
</UL>
<P><STRONG><a name="[2e4]"></a>MAP16_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP16_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[132]"></a>MAP16_MemoryWrite</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP16_MemoryWrite))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP16_Init)
</UL>
<P><STRONG><a name="[2a8]"></a>MAP16_MemoryWrite2</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP16_MemoryWrite2), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>

<P><STRONG><a name="[131]"></a>MAP16_Reset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP16_Reset))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP16_Init)
</UL>
<P><STRONG><a name="[136]"></a>MAP17_HSync</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP17_HSync))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP17_Init)
</UL>
<P><STRONG><a name="[2e5]"></a>MAP17_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP17_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[135]"></a>MAP17_MemoryWriteLow</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP17_MemoryWriteLow))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = MAP17_MemoryWriteLow &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapEF_
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP17_Init)
</UL>
<P><STRONG><a name="[134]"></a>MAP17_Reset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP17_Reset))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP17_Init)
</UL>
<P><STRONG><a name="[139]"></a>MAP189_HSync</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP189_HSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MAP189_HSync
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spr_enabled
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bg_enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP189_Init)
</UL>
<P><STRONG><a name="[302]"></a>MAP189_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP189_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[138]"></a>MAP189_MemoryWrite</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP189_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = MAP189_MemoryWrite &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP189_Init)
</UL>
<P><STRONG><a name="[137]"></a>MAP189_Reset</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP189_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP189_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP189_Init)
</UL>
<P><STRONG><a name="[13c]"></a>MAP18_HSync</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP18_HSync))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP18_Init)
</UL>
<P><STRONG><a name="[2e6]"></a>MAP18_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP18_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[13b]"></a>MAP18_MemoryWrite</STRONG> (Thumb, 628 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP18_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = MAP18_MemoryWrite &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP18_Init)
</UL>
<P><STRONG><a name="[13a]"></a>MAP18_Reset</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP18_Reset))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP18_Init)
</UL>
<P><STRONG><a name="[13f]"></a>MAP19_HSync</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP19_HSync))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP19_Init)
</UL>
<P><STRONG><a name="[2e7]"></a>MAP19_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP19_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[13e]"></a>MAP19_MemoryWrite</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, nes_mapper.o(i.MAP19_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = MAP19_MemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_VRAM_bank
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank9
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank8
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank11
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank10
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP19_Init)
</UL>
<P><STRONG><a name="[13d]"></a>MAP19_Reset</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP19_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MAP19_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP19_Init)
</UL>
<P><STRONG><a name="[2da]"></a>MAP1_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP1_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[2af]"></a>MAP1_MMC1_set_CPU_banks</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP1_MMC1_set_CPU_banks))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = MAP1_MMC1_set_CPU_banks &rArr; set_CPU_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_CPU_banks
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP1_MemoryWrite
</UL>

<P><STRONG><a name="[141]"></a>MAP1_MemoryWrite</STRONG> (Thumb, 574 bytes, Stack size 40 bytes, nes_mapper.o(i.MAP1_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = MAP1_MemoryWrite &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_VRAM_bank
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP1_MMC1_set_CPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP1_Init)
</UL>
<P><STRONG><a name="[140]"></a>MAP1_Reset</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP1_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MAP1_Reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP1_Init)
</UL>
<P><STRONG><a name="[144]"></a>MAP21_HSync</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP21_HSync))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP21_Init)
</UL>
<P><STRONG><a name="[2e8]"></a>MAP21_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP21_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[143]"></a>MAP21_MemoryWrite</STRONG> (Thumb, 704 bytes, Stack size 16 bytes, nes_mapper.o(i.MAP21_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = MAP21_MemoryWrite &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP21_Init)
</UL>
<P><STRONG><a name="[142]"></a>MAP21_Reset</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP21_Reset))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP21_Init)
</UL>
<P><STRONG><a name="[303]"></a>MAP225_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP225_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[146]"></a>MAP225_MemoryWrite</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP225_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = MAP225_MemoryWrite &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapEF_
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP225_Init)
</UL>
<P><STRONG><a name="[145]"></a>MAP225_Reset</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP225_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP225_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP225_Init)
</UL>
<P><STRONG><a name="[304]"></a>MAP227_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP227_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[148]"></a>MAP227_MemoryWrite</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP227_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = MAP227_MemoryWrite &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapEF_
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP227_Init)
</UL>
<P><STRONG><a name="[147]"></a>MAP227_Reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP227_Reset))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP227_Init)
</UL>
<P><STRONG><a name="[2e9]"></a>MAP22_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP22_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[14a]"></a>MAP22_MemoryWrite</STRONG> (Thumb, 196 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP22_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = MAP22_MemoryWrite &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP22_Init)
</UL>
<P><STRONG><a name="[149]"></a>MAP22_Reset</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP22_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP22_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP22_Init)
</UL>
<P><STRONG><a name="[14d]"></a>MAP23_HSync</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP23_HSync))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP23_Init)
</UL>
<P><STRONG><a name="[2ea]"></a>MAP23_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP23_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[14c]"></a>MAP23_MemoryWrite</STRONG> (Thumb, 662 bytes, Stack size 16 bytes, nes_mapper.o(i.MAP23_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = MAP23_MemoryWrite &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP23_Init)
</UL>
<P><STRONG><a name="[14b]"></a>MAP23_Reset</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, nes_mapper.o(i.MAP23_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MAP23_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP23_Init)
</UL>
<P><STRONG><a name="[305]"></a>MAP240_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP240_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[14f]"></a>MAP240_MemoryWriteLow</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP240_MemoryWriteLow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = MAP240_MemoryWriteLow
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapEF_
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP240_Init)
</UL>
<P><STRONG><a name="[14e]"></a>MAP240_Reset</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP240_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP240_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP240_Init)
</UL>
<P><STRONG><a name="[306]"></a>MAP245_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP245_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[151]"></a>MAP245_MemoryWrite</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP245_MemoryWrite))
<BR><BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP245_Init)
</UL>
<P><STRONG><a name="[150]"></a>MAP245_Reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP245_Reset))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP245_Init)
</UL>
<P><STRONG><a name="[154]"></a>MAP24_HSync</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP24_HSync))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP24_Init)
</UL>
<P><STRONG><a name="[2eb]"></a>MAP24_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP24_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[153]"></a>MAP24_MemoryWrite</STRONG> (Thumb, 328 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP24_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = MAP24_MemoryWrite &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP24_Init)
</UL>
<P><STRONG><a name="[152]"></a>MAP24_Reset</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP24_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP24_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP24_Init)
</UL>
<P><STRONG><a name="[157]"></a>MAP25_HSync</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP25_HSync))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP25_Init)
</UL>
<P><STRONG><a name="[2ec]"></a>MAP25_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP25_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[156]"></a>MAP25_MemoryWrite</STRONG> (Thumb, 752 bytes, Stack size 16 bytes, nes_mapper.o(i.MAP25_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = MAP25_MemoryWrite &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP25_Init)
</UL>
<P><STRONG><a name="[155]"></a>MAP25_Reset</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP25_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP25_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP25_Init)
</UL>
<P><STRONG><a name="[2db]"></a>MAP2_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP2_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[159]"></a>MAP2_MemoryWrite</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP2_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = MAP2_MemoryWrite &rArr; set_CPU_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_CPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP2_Init)
</UL>
<P><STRONG><a name="[158]"></a>MAP2_Reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP2_Reset))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP2_Init)
</UL>
<P><STRONG><a name="[2ed]"></a>MAP32_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP32_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[15b]"></a>MAP32_MemoryWrite</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, nes_mapper.o(i.MAP32_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = MAP32_MemoryWrite &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP32_Init)
</UL>
<P><STRONG><a name="[15a]"></a>MAP32_Reset</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP32_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP32_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP32_Init)
</UL>
<P><STRONG><a name="[15e]"></a>MAP33_HSync</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nes_mapper.o(i.MAP33_HSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MAP33_HSync
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spr_enabled
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bg_enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP33_Init)
</UL>
<P><STRONG><a name="[2ee]"></a>MAP33_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP33_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[15d]"></a>MAP33_MemoryWrite</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, nes_mapper.o(i.MAP33_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = MAP33_MemoryWrite &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP33_Init)
</UL>
<P><STRONG><a name="[15c]"></a>MAP33_Reset</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP33_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP33_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP33_Init)
</UL>
<P><STRONG><a name="[2ef]"></a>MAP34_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP34_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[160]"></a>MAP34_MemoryWrite</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP34_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = MAP34_MemoryWrite &rArr; set_CPU_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_CPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP34_Init)
</UL>
<P><STRONG><a name="[15f]"></a>MAP34_Reset</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP34_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP34_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP34_Init)
</UL>
<P><STRONG><a name="[2dc]"></a>MAP3_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP3_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[162]"></a>MAP3_MemoryWrite</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP3_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP3_MemoryWrite &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP3_Init)
</UL>
<P><STRONG><a name="[161]"></a>MAP3_Reset</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP3_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP3_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP3_Init)
</UL>
<P><STRONG><a name="[165]"></a>MAP4_HSync</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP4_HSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MAP4_HSync
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spr_enabled
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bg_enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP4_Init)
</UL>
<P><STRONG><a name="[2dd]"></a>MAP4_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP4_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[2b1]"></a>MAP4_MMC3_set_CPU_banks</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP4_MMC3_set_CPU_banks))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = MAP4_MMC3_set_CPU_banks &rArr; set_CPU_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_CPU_banks
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP4_MemoryWrite
</UL>

<P><STRONG><a name="[2b2]"></a>MAP4_MMC3_set_PPU_banks</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP4_MMC3_set_PPU_banks))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP4_MMC3_set_PPU_banks &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_VRAM_bank
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP4_Reset
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP4_MemoryWrite
</UL>

<P><STRONG><a name="[164]"></a>MAP4_MemoryWrite</STRONG> (Thumb, 340 bytes, Stack size 16 bytes, nes_mapper.o(i.MAP4_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = MAP4_MemoryWrite &rArr; MAP4_MMC3_set_PPU_banks &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP4_MMC3_set_PPU_banks
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP4_MMC3_set_CPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP4_Init)
</UL>
<P><STRONG><a name="[163]"></a>MAP4_Reset</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, nes_mapper.o(i.MAP4_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MAP4_Reset &rArr; MAP4_MMC3_set_PPU_banks &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP4_MMC3_set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP4_Init)
</UL>
<P><STRONG><a name="[168]"></a>MAP64_HSync</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP64_HSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MAP64_HSync
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spr_enabled
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bg_enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP64_Init)
</UL>
<P><STRONG><a name="[2f0]"></a>MAP64_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP64_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[167]"></a>MAP64_MemoryWrite</STRONG> (Thumb, 358 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP64_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = MAP64_MemoryWrite &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP64_Init)
</UL>
<P><STRONG><a name="[166]"></a>MAP64_Reset</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP64_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP64_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP64_Init)
</UL>
<P><STRONG><a name="[16b]"></a>MAP65_HSync</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP65_HSync))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP65_Init)
</UL>
<P><STRONG><a name="[2f1]"></a>MAP65_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP65_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[16a]"></a>MAP65_MemoryWrite</STRONG> (Thumb, 272 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP65_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = MAP65_MemoryWrite &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP65_Init)
</UL>
<P><STRONG><a name="[169]"></a>MAP65_Reset</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP65_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP65_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP65_Init)
</UL>
<P><STRONG><a name="[2f2]"></a>MAP66_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP66_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[16d]"></a>MAP66_MemoryWrite</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP66_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = MAP66_MemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapEF_
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP66_Init)
</UL>
<P><STRONG><a name="[16c]"></a>MAP66_Reset</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP66_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP66_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP66_Init)
</UL>
<P><STRONG><a name="[170]"></a>MAP67_HSync</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP67_HSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MAP67_HSync
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spr_enabled
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bg_enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP67_Init)
</UL>
<P><STRONG><a name="[2f3]"></a>MAP67_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP67_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[16f]"></a>MAP67_MemoryWrite</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, nes_mapper.o(i.MAP67_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = MAP67_MemoryWrite &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP67_Init)
</UL>
<P><STRONG><a name="[16e]"></a>MAP67_Reset</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP67_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MAP67_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP67_Init)
</UL>
<P><STRONG><a name="[173]"></a>MAP69_HSync</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP69_HSync))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP69_Init)
</UL>
<P><STRONG><a name="[2f4]"></a>MAP69_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP69_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[172]"></a>MAP69_MemoryWrite</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP69_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = MAP69_MemoryWrite &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map67_
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP69_Init)
</UL>
<P><STRONG><a name="[171]"></a>MAP69_Reset</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP69_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP69_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP69_Init)
</UL>
<P><STRONG><a name="[176]"></a>MAP6_HSync</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP6_HSync))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP6_Init)
</UL>
<P><STRONG><a name="[2de]"></a>MAP6_Init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP6_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[175]"></a>MAP6_MemoryWrite</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, nes_mapper.o(i.MAP6_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = MAP6_MemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_VRAM_bank
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP6_Init)
</UL>
<P><STRONG><a name="[177]"></a>MAP6_MemoryWriteLow</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP6_MemoryWriteLow))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MAP6_MemoryWriteLow &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP6_Init)
</UL>
<P><STRONG><a name="[174]"></a>MAP6_Reset</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP6_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP6_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_VRAM_bank
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP6_Init)
</UL>
<P><STRONG><a name="[2f5]"></a>MAP70_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP70_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[179]"></a>MAP70_MemoryWrite</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP70_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = MAP70_MemoryWrite &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP70_Init)
</UL>
<P><STRONG><a name="[178]"></a>MAP70_Reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP70_Reset))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP70_Init)
</UL>
<P><STRONG><a name="[2f6]"></a>MAP71_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP71_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[17b]"></a>MAP71_MemoryWrite</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP71_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = MAP71_MemoryWrite &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP71_Init)
</UL>
<P><STRONG><a name="[17a]"></a>MAP71_Reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP71_Reset))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP71_Init)
</UL>
<P><STRONG><a name="[2f7]"></a>MAP72_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP72_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[17d]"></a>MAP72_MemoryWrite</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, nes_mapper.o(i.MAP72_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = MAP72_MemoryWrite &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_CPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP72_Init)
</UL>
<P><STRONG><a name="[17c]"></a>MAP72_Reset</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP72_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP72_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP72_Init)
</UL>
<P><STRONG><a name="[180]"></a>MAP73_HSync</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP73_HSync))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP73_Init)
</UL>
<P><STRONG><a name="[2f8]"></a>MAP73_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP73_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[17f]"></a>MAP73_MemoryWrite</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP73_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = MAP73_MemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP73_Init)
</UL>
<P><STRONG><a name="[17e]"></a>MAP73_Reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP73_Reset))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP73_Init)
</UL>
<P><STRONG><a name="[2f9]"></a>MAP75_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP75_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[182]"></a>MAP75_MemoryWrite</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, nes_mapper.o(i.MAP75_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = MAP75_MemoryWrite &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP75_Init)
</UL>
<P><STRONG><a name="[181]"></a>MAP75_Reset</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP75_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP75_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP75_Init)
</UL>
<P><STRONG><a name="[2fa]"></a>MAP76_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP76_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[184]"></a>MAP76_MemoryWrite</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP76_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = MAP76_MemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP76_Init)
</UL>
<P><STRONG><a name="[183]"></a>MAP76_Reset</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP76_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP76_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP76_Init)
</UL>
<P><STRONG><a name="[2fb]"></a>MAP78_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP78_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[186]"></a>MAP78_MemoryWrite</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP78_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = MAP78_MemoryWrite &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP78_Init)
</UL>
<P><STRONG><a name="[185]"></a>MAP78_Reset</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP78_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP78_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP78_Init)
</UL>
<P><STRONG><a name="[2fc]"></a>MAP79_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP79_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[188]"></a>MAP79_MemoryWriteLow</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP79_MemoryWriteLow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = MAP79_MemoryWriteLow
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapEF_
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP79_Init)
</UL>
<P><STRONG><a name="[187]"></a>MAP79_Reset</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP79_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP79_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP79_Init)
</UL>
<P><STRONG><a name="[2df]"></a>MAP7_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP7_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[18a]"></a>MAP7_MemoryWrite</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP7_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = MAP7_MemoryWrite &rArr; set_CPU_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_CPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP7_Init)
</UL>
<P><STRONG><a name="[189]"></a>MAP7_Reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP7_Reset))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP7_Init)
</UL>
<P><STRONG><a name="[18d]"></a>MAP85_HSync</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP85_HSync))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP85_Init)
</UL>
<P><STRONG><a name="[2fd]"></a>MAP85_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP85_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[18c]"></a>MAP85_MemoryWrite</STRONG> (Thumb, 392 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP85_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = MAP85_MemoryWrite &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_VRAM_bank
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP85_Init)
</UL>
<P><STRONG><a name="[18b]"></a>MAP85_Reset</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP85_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP85_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_VRAM_bank
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP85_Init)
</UL>
<P><STRONG><a name="[2fe]"></a>MAP87_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP87_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[18f]"></a>MAP87_MemoryWrite</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP87_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MAP87_MemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP87_Init)
</UL>
<P><STRONG><a name="[18e]"></a>MAP87_Reset</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP87_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP87_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP87_Init)
</UL>
<P><STRONG><a name="[2ff]"></a>MAP88_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP88_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[191]"></a>MAP88_MemoryWrite</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, nes_mapper.o(i.MAP88_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = MAP88_MemoryWrite &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP88_Init)
</UL>
<P><STRONG><a name="[190]"></a>MAP88_Reset</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP88_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP88_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP88_Init)
</UL>
<P><STRONG><a name="[2e0]"></a>MAP8_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP8_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[193]"></a>MAP8_MemoryWrite</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, nes_mapper.o(i.MAP8_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = MAP8_MemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP8_Init)
</UL>
<P><STRONG><a name="[192]"></a>MAP8_Reset</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP8_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP8_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP8_Init)
</UL>
<P><STRONG><a name="[300]"></a>MAP99_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.MAP99_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
</UL>

<P><STRONG><a name="[194]"></a>MAP99_Reset</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP99_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP99_Reset &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP99_Init)
</UL>
<P><STRONG><a name="[195]"></a>MAP99_WriteHighRegs</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, nes_mapper.o(i.MAP99_WriteHighRegs))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MAP99_WriteHighRegs &rArr; set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.MAP99_Init)
</UL>
<P><STRONG><a name="[2bc]"></a>MSC_BOT_CplClrFeature</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, usbd_msc_bot.o(i.MSC_BOT_CplClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MSC_BOT_CplClrFeature &rArr; MSC_BOT_SendCSW &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
</UL>

<P><STRONG><a name="[2bd]"></a>MSC_BOT_DataIn</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, usbd_msc_bot.o(i.MSC_BOT_DataIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MSC_BOT_DataIn &rArr; SCSI_ProcessCmd &rArr; SCSI_Write12 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DataIn
</UL>

<P><STRONG><a name="[2be]"></a>MSC_BOT_DataOut</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, usbd_msc_bot.o(i.MSC_BOT_DataOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MSC_BOT_DataOut &rArr; MSC_BOT_CBW_Decode &rArr; SCSI_ProcessCmd &rArr; SCSI_Write12 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DataOut
</UL>

<P><STRONG><a name="[344]"></a>MSC_BOT_DeInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbd_msc_bot.o(i.MSC_BOT_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DeInit
</UL>

<P><STRONG><a name="[2bf]"></a>MSC_BOT_Init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, usbd_msc_bot.o(i.MSC_BOT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MSC_BOT_Init &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_FlushEP
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Init
</UL>

<P><STRONG><a name="[2c2]"></a>MSC_BOT_Reset</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usbd_msc_bot.o(i.MSC_BOT_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MSC_BOT_Reset &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
</UL>

<P><STRONG><a name="[2bb]"></a>MSC_BOT_SendCSW</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usbd_msc_bot.o(i.MSC_BOT_SendCSW))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MSC_BOT_SendCSW &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessWrite
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataOut
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataIn
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CplClrFeature
</UL>

<P><STRONG><a name="[2c4]"></a>MX_ADC1_Init</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, adc.o(i.MX_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_ADC1_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c6]"></a>MX_DAC_Init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dac.o(i.MX_DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_DAC_Init &rArr; HAL_DAC_Init &rArr; HAL_DAC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_Init
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_ConfigChannel
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c8]"></a>MX_DMA_Init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, dma.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c9]"></a>MX_GPIO_Init</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2cb]"></a>MX_RTC_Init</STRONG> (Thumb, 200 bytes, Stack size 80 bytes, rtc.o(i.MX_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MX_RTC_Init &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetWakeUpTimer_IT
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2cd]"></a>MX_SPI1_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, spi.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2ce]"></a>MX_SPI2_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, spi.o(i.MX_SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2cf]"></a>MX_TIM1_Init</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, tim.o(i.MX_TIM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MX_TIM1_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d1]"></a>MX_TIM2_Init</STRONG> (Thumb, 146 bytes, Stack size 64 bytes, tim.o(i.MX_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MX_TIM2_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d2]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d3]"></a>MX_USB_DEVICE_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, usb_device.o(i.MX_USB_DEVICE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MX_USB_DEVICE_Init &rArr; USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RegisterClass
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_RegisterStorage
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19b]"></a>Mapper_HSync</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nes_mapper.o(i.Mapper_HSync))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.Mapper_Init)
</UL>
<P><STRONG><a name="[2d8]"></a>Mapper_Init</STRONG> (Thumb, 502 bytes, Stack size 16 bytes, nes_mapper.o(i.Mapper_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Mapper_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP99_Init
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP8_Init
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP88_Init
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP87_Init
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP85_Init
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP7_Init
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP79_Init
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP78_Init
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP76_Init
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP75_Init
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP73_Init
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP72_Init
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP71_Init
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP70_Init
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP6_Init
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP69_Init
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP67_Init
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP66_Init
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP65_Init
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP64_Init
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP4_Init
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP3_Init
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP34_Init
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP33_Init
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP32_Init
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP2_Init
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP25_Init
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP24_Init
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP245_Init
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP240_Init
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP23_Init
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP22_Init
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP227_Init
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP225_Init
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP21_Init
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP1_Init
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_Init
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP18_Init
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP189_Init
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP17_Init
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP16_Init
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP15_Init
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP13_Init
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP11_Init
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_Init
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP0_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_load
</UL>

<P><STRONG><a name="[198]"></a>Mapper_Read</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nes_mapper.o(i.Mapper_Read))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.Mapper_Init)
</UL>
<P><STRONG><a name="[19a]"></a>Mapper_ReadLow</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nes_mapper.o(i.Mapper_ReadLow))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.Mapper_Init)
</UL>
<P><STRONG><a name="[196]"></a>Mapper_Reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nes_mapper.o(i.Mapper_Reset))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.Mapper_Init)
</UL>
<P><STRONG><a name="[19c]"></a>Mapper_VSync</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nes_mapper.o(i.Mapper_VSync))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.Mapper_Init)
</UL>
<P><STRONG><a name="[197]"></a>Mapper_Write</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nes_mapper.o(i.Mapper_Write))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.Mapper_Init)
</UL>
<P><STRONG><a name="[199]"></a>Mapper_WriteLow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nes_mapper.o(i.Mapper_WriteLow))
<BR>[Address Reference Count : 1]<UL><LI> nes_mapper.o(i.Mapper_Init)
</UL>
<P><STRONG><a name="[28]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[307]"></a>Menu_Del</STRONG> (Thumb, 540 bytes, Stack size 48 bytes, menu.o(i.Menu_Del))
<BR><BR>[Stack]<UL><LI>Max Depth = 1604<LI>Call Chain = Menu_Del &rArr; Game_Init &rArr; nes_load &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_FatFs_Write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Seek
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Game_Init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calendar_Init
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Init
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_Init
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRoundRectangle
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_main
</UL>

<P><STRONG><a name="[308]"></a>Menu_Init</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, menu.o(i.Menu_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Menu_Init &rArr; Gui_DrawFont_GBK16 &rArr; LCD_DrawPoint &rArr; LCD_WR_DATA_16Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_DrawFont_GBK16
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBMP
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Del
</UL>

<P><STRONG><a name="[276]"></a>NES_Play</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, nes_main.o(i.NES_Play))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = NES_Play &rArr; HAL_DAC_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[30a]"></a>NES_SetPlay_SamplesPerSec</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, nes_main.o(i.NES_SetPlay_SamplesPerSec))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = NES_SetPlay_SamplesPerSec &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_load
</UL>

<P><STRONG><a name="[3bc]"></a>NES_get_gamepadval</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, nes_main.o(i.NES_get_gamepadval))
<BR><BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_emulate_frame
</UL>

<P><STRONG><a name="[30b]"></a>NES_set_window</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nes_main.o(i.NES_set_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = NES_set_window &rArr; LCD_SetWindows &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindows
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_emulate_frame
</UL>

<P><STRONG><a name="[26]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3ba]"></a>NMI_enabled</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nes_ppu.o(i.NMI_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_emulate_frame
</UL>

<P><STRONG><a name="[72]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = OTG_FS_IRQHandler &rArr; HAL_PCD_IRQHandler &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1bb]"></a>PPU_ReadFromPort</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, nes_ppu.o(i.PPU_ReadFromPort))
<BR><BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_2007
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_R
</UL>

<P><STRONG><a name="[1ba]"></a>PPU_WriteToPort</STRONG> (Thumb, 200 bytes, Stack size 4 bytes, nes_ppu.o(i.PPU_WriteToPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PPU_WriteToPort &rArr; write_2007 &rArr; update_tile
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_2007
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_W
</UL>

<P><STRONG><a name="[30f]"></a>PPU_reset</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, nes_ppu.o(i.PPU_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PPU_reset &rArr; set_mirroring
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mirroring
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_load
</UL>

<P><STRONG><a name="[310]"></a>PPU_start_frame</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, nes_ppu.o(i.PPU_start_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PPU_start_frame
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spr_enabled
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bg_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_emulate_frame
</UL>

<P><STRONG><a name="[2d]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.RTC_Alarm_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_Alarm_IRQHandler &rArr; HAL_RTC_AlarmIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[251]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>

<P><STRONG><a name="[256]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
</UL>

<P><STRONG><a name="[254]"></a>RTC_EnterInitMode</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, stm32f4xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[255]"></a>RTC_ExitInitMode</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(i.RTC_ExitInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_ExitInitMode &rArr; HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[32]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.RTC_WKUP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_WKUP_IRQHandler &rArr; HAL_RTCEx_WakeUpTimerIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_WakeUpTimerIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b9]"></a>SCSI_ProcessCmd</STRONG> (Thumb, 340 bytes, Stack size 24 bytes, usbd_msc_scsi.o(i.SCSI_ProcessCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SCSI_ProcessCmd &rArr; SCSI_Write12 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write12
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_UpdateBotData
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_TestUnitReady
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_RequestSense
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity16
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity10
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read12
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Inquiry
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CheckAddressRange
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataOut
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataIn
</UL>

<P><STRONG><a name="[2b8]"></a>SCSI_SenseCode</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, usbd_msc_scsi.o(i.SCSI_SenseCode))
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write12
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_TestUnitReady
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_RequestSense
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity16
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity10
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read12
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessWrite
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessRead
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Inquiry
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CheckAddressRange
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
</UL>

<P><STRONG><a name="[52]"></a>SPI1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SPI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI1_IRQHandler &rArr; HAL_SPI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[323]"></a>ST7789_Init</STRONG> (Thumb, 498 bytes, Stack size 8 bytes, st7789.o(i.ST7789_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ST7789_Init &rArr; LCD_Clear &rArr; LCD_SetWindows &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_main
</UL>

<P><STRONG><a name="[298]"></a>ST7789_ReadWriteByte</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, st7789.o(i.ST7789_ReadWriteByte))
<BR><BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA_16Bit
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
</UL>

<P><STRONG><a name="[2b]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[327]"></a>SystemClock_Config</STRONG> (Thumb, 146 bytes, Stack size 88 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>SystemInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[48]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.TIM1_UP_TIM10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TIM1_UP_TIM10_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; WAV_Play &rArr; HAL_DAC_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[260]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[262]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[271]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[328]"></a>Time_Init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.Time_Init))
<BR><BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_main
</UL>

<P><STRONG><a name="[349]"></a>USBD_ClrClassConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_ClrClassConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_ClrClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[34b]"></a>USBD_CoreFindEP</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_CoreFindEP))
<BR><BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[34d]"></a>USBD_CoreFindIF</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_CoreFindIF))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
</UL>

<P><STRONG><a name="[32c]"></a>USBD_CtlContinueRx</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlContinueRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>

<P><STRONG><a name="[32d]"></a>USBD_CtlContinueSendData</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlContinueSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CtlContinueSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[32e]"></a>USBD_CtlError</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_ctlreq.o(i.USBD_CtlError))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_CtlError &rArr; USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall &rArr; USB_EP0_OutStart
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[32f]"></a>USBD_CtlReceiveStatus</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlReceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[330]"></a>USBD_CtlSendData</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[331]"></a>USBD_CtlSendStatus</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[5]"></a>USBD_FS_ConfigStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_FS_ConfigStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_FS_ConfigStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>USBD_FS_DeviceDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_FS_DeviceDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>USBD_FS_InterfaceStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_FS_InterfaceStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_FS_InterfaceStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>USBD_FS_LangIDStrDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_FS_LangIDStrDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>USBD_FS_ManufacturerStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_FS_ManufacturerStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_FS_ManufacturerStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>USBD_FS_ProductStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_FS_ProductStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_FS_ProductStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>USBD_FS_SerialStrDescriptor</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_FS_SerialStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USBD_FS_SerialStrDescriptor &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToUnicode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[335]"></a>USBD_GetEpDesc</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, usbd_core.o(i.USBD_GetEpDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBD_GetEpDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetNextDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetOtherSpeedCfgDesc
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetHSCfgDesc
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetFSCfgDesc
</UL>

<P><STRONG><a name="[336]"></a>USBD_GetNextDesc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_GetNextDesc))
<BR><BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetEpDesc
</UL>

<P><STRONG><a name="[332]"></a>USBD_GetString</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_GetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_GetString
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ProductStrDescriptor
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ManufacturerStrDescriptor
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_InterfaceStrDescriptor
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ConfigStrDescriptor
</UL>

<P><STRONG><a name="[338]"></a>USBD_Get_USB_Status</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_Get_USB_Status))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_FlushEP
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
</UL>

<P><STRONG><a name="[2d4]"></a>USBD_Init</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[2c3]"></a>USBD_LL_ClearStallEP</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_ClearStallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_LL_ClearStallEP &rArr; HAL_PCD_EP_ClrStall
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Reset
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[339]"></a>USBD_LL_CloseEP</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_CloseEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBD_LL_CloseEP &rArr; HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DeInit
</UL>

<P><STRONG><a name="[205]"></a>USBD_LL_DataInStage</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, usbd_core.o(i.USBD_LL_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USBD_LL_DataInStage &rArr; USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
</UL>

<P><STRONG><a name="[207]"></a>USBD_LL_DataOutStage</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_LL_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_LL_DataOutStage &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
</UL>

<P><STRONG><a name="[203]"></a>USBD_LL_DevConnected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_DevConnected))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ConnectCallback
</UL>

<P><STRONG><a name="[209]"></a>USBD_LL_DevDisconnected</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_DevDisconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_DevDisconnected
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DisconnectCallback
</UL>

<P><STRONG><a name="[2c0]"></a>USBD_LL_FlushEP</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_FlushEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USBD_LL_FlushEP &rArr; HAL_PCD_EP_Flush &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Flush
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Init
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
</UL>

<P><STRONG><a name="[2b7]"></a>USBD_LL_GetRxDataSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_LL_GetRxDataSize))
<BR><BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_GetRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
</UL>

<P><STRONG><a name="[337]"></a>USBD_LL_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_SetTxFiFo
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_SetRxFiFo
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[34c]"></a>USBD_LL_IsStallEP</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_LL_IsStallEP))
<BR><BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[232]"></a>USBD_LL_IsoINIncomplete</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_IsoINIncomplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_IsoINIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOINIncompleteCallback
</UL>

<P><STRONG><a name="[233]"></a>USBD_LL_IsoOUTIncomplete</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_IsoOUTIncomplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_IsoOUTIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOOUTIncompleteCallback
</UL>

<P><STRONG><a name="[33d]"></a>USBD_LL_OpenEP</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_OpenEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Init
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
</UL>

<P><STRONG><a name="[2c1]"></a>USBD_LL_PrepareReceive</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_PrepareReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write12
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessWrite
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Reset
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Init
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>

<P><STRONG><a name="[23d]"></a>USBD_LL_Reset</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, usbd_core.o(i.USBD_LL_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[23e]"></a>USBD_LL_Resume</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_Resume))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
</UL>

<P><STRONG><a name="[23f]"></a>USBD_LL_SOF</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_SOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
</UL>

<P><STRONG><a name="[23c]"></a>USBD_LL_SetSpeed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_SetSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[33e]"></a>USBD_LL_SetUSBAddress</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_SetUSBAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_LL_SetUSBAddress &rArr; HAL_PCD_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[242]"></a>USBD_LL_SetupStage</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_LL_SetupStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
</UL>

<P><STRONG><a name="[2b5]"></a>USBD_LL_StallEP</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_StallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall &rArr; USB_EP0_OutStart
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Abort
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CplClrFeature
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[343]"></a>USBD_LL_Start</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_LL_Start &rArr; HAL_PCD_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
</UL>

<P><STRONG><a name="[246]"></a>USBD_LL_Suspend</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_Suspend))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
</UL>

<P><STRONG><a name="[2ba]"></a>USBD_LL_Transmit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessRead
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
</UL>

<P><STRONG><a name="[11]"></a>USBD_MSC_DataIn</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbd_msc.o(i.USBD_MSC_DataIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = USBD_MSC_DataIn &rArr; MSC_BOT_DataIn &rArr; SCSI_ProcessCmd &rArr; SCSI_Write12 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataIn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>USBD_MSC_DataOut</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbd_msc.o(i.USBD_MSC_DataOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = USBD_MSC_DataOut &rArr; MSC_BOT_DataOut &rArr; MSC_BOT_CBW_Decode &rArr; SCSI_ProcessCmd &rArr; SCSI_Write12 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataOut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>USBD_MSC_DeInit</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, usbd_msc.o(i.USBD_MSC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_MSC_DeInit &rArr; USBD_LL_CloseEP &rArr; HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DeInit
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_static_free
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>USBD_MSC_GetDeviceQualifierDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_msc.o(i.USBD_MSC_GetDeviceQualifierDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>USBD_MSC_GetFSCfgDesc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usbd_msc.o(i.USBD_MSC_GetFSCfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBD_MSC_GetFSCfgDesc &rArr; USBD_GetEpDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetEpDesc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>USBD_MSC_GetHSCfgDesc</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usbd_msc.o(i.USBD_MSC_GetHSCfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBD_MSC_GetHSCfgDesc &rArr; USBD_GetEpDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetEpDesc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>USBD_MSC_GetOtherSpeedCfgDesc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usbd_msc.o(i.USBD_MSC_GetOtherSpeedCfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBD_MSC_GetOtherSpeedCfgDesc &rArr; USBD_GetEpDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetEpDesc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>USBD_MSC_Init</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, usbd_msc.o(i.USBD_MSC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBD_MSC_Init &rArr; MSC_BOT_Init &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Init
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_static_malloc
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc.o(.data)
</UL>
<P><STRONG><a name="[2d6]"></a>USBD_MSC_RegisterStorage</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbd_msc.o(i.USBD_MSC_RegisterStorage))
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[10]"></a>USBD_MSC_Setup</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, usbd_msc.o(i.USBD_MSC_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_MSC_Setup &rArr; MSC_BOT_CplClrFeature &rArr; MSC_BOT_SendCSW &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Reset
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CplClrFeature
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_FlushEP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc.o(.data)
</UL>
<P><STRONG><a name="[33f]"></a>USBD_ParseSetupRequest</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_ParseSetupRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_ParseSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWAPBYTE
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[2d5]"></a>USBD_RegisterClass</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_RegisterClass))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_RegisterClass
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[34a]"></a>USBD_SetClassConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_SetClassConfig))
<BR><BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[2d7]"></a>USBD_Start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_Start &rArr; USBD_LL_Start &rArr; HAL_PCD_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[340]"></a>USBD_StdDevReq</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_StdDevReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_StdDevReq &rArr; USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[342]"></a>USBD_StdEPReq</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_StdEPReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USBD_StdEPReq &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsStallEP
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CoreFindEP
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[341]"></a>USBD_StdItfReq</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_StdItfReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_StdItfReq &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CoreFindIF
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[345]"></a>USBD_static_free</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_static_free))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DeInit
</UL>

<P><STRONG><a name="[346]"></a>USBD_static_malloc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_static_malloc))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Init
</UL>

<P><STRONG><a name="[214]"></a>USB_ActivateEndpoint</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(i.USB_ActivateEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
</UL>

<P><STRONG><a name="[22c]"></a>USB_ActivateSetup</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ActivateSetup))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[237]"></a>USB_CoreInit</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(i.USB_CoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_CoreInit &rArr; USB_CoreReset
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[20d]"></a>USB_DeactivateEndpoint</STRONG> (Thumb, 194 bytes, Stack size 12 bytes, stm32f4xx_ll_usb.o(i.USB_DeactivateEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_DeactivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
</UL>

<P><STRONG><a name="[245]"></a>USB_DevConnect</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_DevConnect))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[23a]"></a>USB_DevDisconnect</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_DevDisconnect))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[239]"></a>USB_DevInit</STRONG> (Thumb, 362 bytes, Stack size 36 bytes, stm32f4xx_ll_usb.o(i.USB_DevInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_DevInit &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[236]"></a>USB_DisableGlobalInt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_DisableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[217]"></a>USB_EP0StartXfer</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(i.USB_EP0StartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>

<P><STRONG><a name="[21a]"></a>USB_EP0_OutStart</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_EP0_OutStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutXfrComplete_int
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[20f]"></a>USB_EPClearStall</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_EPClearStall))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
</UL>

<P><STRONG><a name="[219]"></a>USB_EPSetStall</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_EPSetStall))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>

<P><STRONG><a name="[216]"></a>USB_EPStartXfer</STRONG> (Thumb, 480 bytes, Stack size 24 bytes, stm32f4xx_ll_usb.o(i.USB_EPStartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>

<P><STRONG><a name="[20b]"></a>USB_EPStopXfer</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(i.USB_EPStopXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_EPStopXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Abort
</UL>

<P><STRONG><a name="[244]"></a>USB_EnableGlobalInt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_EnableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[212]"></a>USB_FlushRxFifo</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_FlushRxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_FlushRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Flush
</UL>

<P><STRONG><a name="[211]"></a>USB_FlushTxFifo</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f4xx_ll_usb.o(i.USB_FlushTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_FlushTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Flush
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[22d]"></a>USB_GetDevSpeed</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_GetDevSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[21d]"></a>USB_GetMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[225]"></a>USB_ReadDevAllInEpInterrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevAllInEpInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[220]"></a>USB_ReadDevAllOutEpInterrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevAllOutEpInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[226]"></a>USB_ReadDevInEPInterrupt</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevInEPInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ReadDevInEPInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[221]"></a>USB_ReadDevOutEPInterrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevOutEPInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[21e]"></a>USB_ReadInterrupts</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[21f]"></a>USB_ReadPacket</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, stm32f4xx_ll_usb.o(i.USB_ReadPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[238]"></a>USB_SetCurrentMode</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(i.USB_SetCurrentMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_SetCurrentMode &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[241]"></a>USB_SetDevAddress</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_SetDevAddress))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
</UL>

<P><STRONG><a name="[22f]"></a>USB_SetTurnaroundTime</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_SetTurnaroundTime))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[30c]"></a>USB_WritePacket</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_WritePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteEmptyTxFifo
</UL>

<P><STRONG><a name="[2a]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34f]"></a>W25QXX_Erase_Sector</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, w25qxx.o(i.W25QXX_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = W25QXX_Erase_Sector &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
</UL>

<P><STRONG><a name="[353]"></a>W25QXX_FatFs_Init</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, w25qxx.o(i.W25QXX_FatFs_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = W25QXX_FatFs_Init &rArr; W25QXX_Init &rArr; W25QXX_ReadID
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[396]"></a>W25QXX_FatFs_Ioctl</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, w25qxx.o(i.W25QXX_FatFs_Ioctl))
<BR><BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>

<P><STRONG><a name="[324]"></a>W25QXX_FatFs_Read</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, w25qxx.o(i.W25QXX_FatFs_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = W25QXX_FatFs_Read &rArr; W25QXX_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Read_FS
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[399]"></a>W25QXX_FatFs_Status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, w25qxx.o(i.W25QXX_FatFs_Status))
<BR><BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>

<P><STRONG><a name="[325]"></a>W25QXX_FatFs_Write</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, w25qxx.o(i.W25QXX_FatFs_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = W25QXX_FatFs_Write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Write_FS
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[354]"></a>W25QXX_Init</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, w25qxx.o(i.W25QXX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = W25QXX_Init &rArr; W25QXX_ReadID
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadID
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_FatFs_Init
</UL>

<P><STRONG><a name="[355]"></a>W25QXX_Read</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, w25qxx.o(i.W25QXX_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = W25QXX_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_FatFs_Read
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
</UL>

<P><STRONG><a name="[357]"></a>W25QXX_ReadID</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, w25qxx.o(i.W25QXX_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = W25QXX_ReadID
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>

<P><STRONG><a name="[358]"></a>W25QXX_ReadSR</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, w25qxx.o(i.W25QXX_ReadSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
</UL>

<P><STRONG><a name="[352]"></a>W25QXX_ReadWriteByte</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, w25qxx.o(i.W25QXX_ReadWriteByte))
<BR><BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadID
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
</UL>

<P><STRONG><a name="[351]"></a>W25QXX_Wait_Busy</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, w25qxx.o(i.W25QXX_Wait_Busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
</UL>

<P><STRONG><a name="[356]"></a>W25QXX_Write</STRONG> (Thumb, 152 bytes, Stack size 36 bytes, w25qxx.o(i.W25QXX_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_NoCheck
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_FatFs_Write
</UL>

<P><STRONG><a name="[350]"></a>W25QXX_Write_Enable</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, w25qxx.o(i.W25QXX_Write_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = W25QXX_Write_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
</UL>

<P><STRONG><a name="[359]"></a>W25QXX_Write_NoCheck</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, w25qxx.o(i.W25QXX_Write_NoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
</UL>

<P><STRONG><a name="[35a]"></a>W25QXX_Write_Page</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, w25qxx.o(i.W25QXX_Write_Page))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_NoCheck
</UL>

<P><STRONG><a name="[309]"></a>WAV_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, wav.o(i.WAV_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1060<LI>Call Chain = WAV_Init &rArr; WAV_Run &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_FatFs_Write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_DrawFont_GBK16
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_Stop
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_Start
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fatfs_File_Scan
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_Run
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_ListView
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBMP
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Del
</UL>

<P><STRONG><a name="[35b]"></a>WAV_ListView</STRONG> (Thumb, 528 bytes, Stack size 32 bytes, wav.o(i.WAV_ListView))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = WAV_ListView &rArr; Gui_DrawFont_GBK16 &rArr; LCD_DrawPoint &rArr; LCD_WR_DATA_16Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_DrawFont_GBK16
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_Run
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_Init
</UL>

<P><STRONG><a name="[278]"></a>WAV_Play</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, wav.o(i.WAV_Play))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = WAV_Play &rArr; HAL_DAC_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_SetValue
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_SetVolume
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[35c]"></a>WAV_Run</STRONG> (Thumb, 834 bytes, Stack size 608 bytes, wav.o(i.WAV_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 1036<LI>Call Chain = WAV_Run &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_FatFs_Write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_DrawFont_GBK16
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_SetPlay_SamplesPerSec
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_ListView
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBMP
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_Init
</UL>

<P><STRONG><a name="[360]"></a>WAV_SetPlay_SamplesPerSec</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, wav.o(i.WAV_SetPlay_SamplesPerSec))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WAV_SetPlay_SamplesPerSec &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_Run
</UL>

<P><STRONG><a name="[35d]"></a>WAV_SetVolume</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, wav.o(i.WAV_SetVolume))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_Play
</UL>

<P><STRONG><a name="[361]"></a>__0printf$1</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf1.o(i.__0printf$1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3e0]"></a>__1printf$1</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0printf$1), UNUSED)

<P><STRONG><a name="[285]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0printf$1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_main
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_Run
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;in_func
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Code
</UL>

<P><STRONG><a name="[3e1]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[3e2]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[3e3]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[364]"></a>apu_build_luts</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, nes_apu.o(i.apu_build_luts))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = apu_build_luts &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_setparams
</UL>

<P><STRONG><a name="[36f]"></a>apu_dequeue</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nes_apu.o(i.apu_dequeue))
<BR><BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_process
</UL>

<P><STRONG><a name="[365]"></a>apu_dmc</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, nes_apu.o(i.apu_dmc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = apu_dmc
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K6502_Read
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_dmcreload
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_process
</UL>

<P><STRONG><a name="[367]"></a>apu_dmcreload</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nes_apu.o(i.apu_dmcreload))
<BR><BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_regwrite
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_dmc
</UL>

<P><STRONG><a name="[1c1]"></a>apu_enqueue</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, nes_apu.o(i.apu_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = apu_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Apu_Write4015
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Apu_Write
</UL>

<P><STRONG><a name="[368]"></a>apu_init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, nes_apu.o(i.apu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = apu_init &rArr; apu_setparams &rArr; apu_build_luts &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_setparams
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_setchan
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_reset
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_load
</UL>

<P><STRONG><a name="[36c]"></a>apu_noise</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, nes_apu.o(i.apu_noise))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = apu_noise &rArr; shift_register15
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_register15
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_process
</UL>

<P><STRONG><a name="[36e]"></a>apu_process</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, nes_apu.o(i.apu_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = apu_process &rArr; apu_regwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_triangle
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_regwrite
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_rectangle
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_noise
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_dmc
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_soundoutput
</UL>

<P><STRONG><a name="[371]"></a>apu_rectangle</STRONG> (Thumb, 254 bytes, Stack size 20 bytes, nes_apu.o(i.apu_rectangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = apu_rectangle
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_process
</UL>

<P><STRONG><a name="[370]"></a>apu_regwrite</STRONG> (Thumb, 706 bytes, Stack size 56 bytes, nes_apu.o(i.apu_regwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = apu_regwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_dmcreload
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_reset
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_process
</UL>

<P><STRONG><a name="[36a]"></a>apu_reset</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, nes_apu.o(i.apu_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = apu_reset &rArr; apu_regwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_regwrite
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_init
</UL>

<P><STRONG><a name="[36b]"></a>apu_setchan</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nes_apu.o(i.apu_setchan))
<BR><BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_init
</UL>

<P><STRONG><a name="[369]"></a>apu_setparams</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, nes_apu.o(i.apu_setparams))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = apu_setparams &rArr; apu_build_luts &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_build_luts
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_init
</UL>

<P><STRONG><a name="[374]"></a>apu_soundoutput</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, nes_apu.o(i.apu_soundoutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = apu_soundoutput &rArr; apu_process &rArr; apu_regwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_apu_fill_buffer
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_process
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_emulate_frame
</UL>

<P><STRONG><a name="[372]"></a>apu_triangle</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, nes_apu.o(i.apu_triangle))
<BR><BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_process
</UL>

<P><STRONG><a name="[3c9]"></a>asm_Mapper_ReadLow</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nes_mapper.o(i.asm_Mapper_ReadLow))
<BR><BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Low
</UL>

<P><STRONG><a name="[3ce]"></a>asm_Mapper_Write</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.asm_Mapper_Write))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_W
</UL>

<P><STRONG><a name="[3ca]"></a>asm_Mapper_WriteLow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_mapper.o(i.asm_Mapper_WriteLow))
<BR><BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Low
</UL>

<P><STRONG><a name="[2aa]"></a>bg_enabled</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nes_ppu.o(i.bg_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_scanline_and_dont_draw
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_start_frame
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_scanline_and_draw
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP67_HSync
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP64_HSync
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP4_HSync
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP33_HSync
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP189_HSync
</UL>

<P><STRONG><a name="[3c0]"></a>compile</STRONG> (Thumb, 224 bytes, Stack size 36 bytes, nes_ppu.o(i.compile))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = compile
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_load_rom
</UL>

<P><STRONG><a name="[1bd]"></a>debug_6502</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nes_main.o(i.debug_6502))
<BR><BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;empty_R
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_xx
</UL>

<P><STRONG><a name="[394]"></a>disk_initialize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = disk_initialize &rArr; W25QXX_FatFs_Init &rArr; W25QXX_Init &rArr; W25QXX_ReadID
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_FatFs_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[395]"></a>disk_ioctl</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_FatFs_Ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[397]"></a>disk_read</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = disk_read &rArr; W25QXX_FatFs_Read &rArr; W25QXX_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_FatFs_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[398]"></a>disk_status</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_FatFs_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[38a]"></a>disk_write</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = disk_write &rArr; W25QXX_FatFs_Write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_FatFs_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[39a]"></a>do_scanline_and_dont_draw</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, nes_ppu.o(i.do_scanline_and_dont_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = do_scanline_and_dont_draw &rArr; do_scanline_and_draw &rArr; render_spr
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprites_8x16
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprite0_hit
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_scanline_and_draw
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spr_enabled
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bg_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_emulate_frame
</UL>

<P><STRONG><a name="[39d]"></a>do_scanline_and_draw</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, nes_ppu.o(i.do_scanline_and_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = do_scanline_and_draw &rArr; render_spr
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;render_spr
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;render_bg
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spr_enabled
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bg_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanline_draw
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_scanline_and_dont_draw
</UL>

<P><STRONG><a name="[3bb]"></a>end_vblank</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nes_ppu.o(i.end_vblank))
<BR><BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_emulate_frame
</UL>

<P><STRONG><a name="[286]"></a>f_close</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; W25QXX_FatFs_Write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_load
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_Run
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Code
</UL>

<P><STRONG><a name="[1db]"></a>f_closedir</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ff.o(i.f_closedir))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = f_closedir &rArr; validate
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fatfs_File_Scan
</UL>

<P><STRONG><a name="[35f]"></a>f_lseek</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, ff.o(i.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_FatFs_Write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_load
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_Run
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;in_func
</UL>

<P><STRONG><a name="[3a2]"></a>f_mount</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = f_mount &rArr; mount_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_FatFs_Write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_main
</UL>

<P><STRONG><a name="[284]"></a>f_open</STRONG> (Thumb, 434 bytes, Stack size 96 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_FatFs_Write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_load
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_Run
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Code
</UL>

<P><STRONG><a name="[1d7]"></a>f_opendir</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ff.o(i.f_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_FatFs_Write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fatfs_File_Scan
</UL>

<P><STRONG><a name="[35e]"></a>f_read</STRONG> (Thumb, 324 bytes, Stack size 48 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_FatFs_Write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_load
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_Run
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;in_func
</UL>

<P><STRONG><a name="[1d8]"></a>f_readdir</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ff.o(i.f_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = f_readdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_FatFs_Write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fatfs_File_Scan
</UL>

<P><STRONG><a name="[3a0]"></a>f_sync</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; W25QXX_FatFs_Write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[384]"></a>ff_oem2uni</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, ffunicode.o(i.ff_oem2uni))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ff_oem2uni
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[386]"></a>ff_uni2oem</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, ffunicode.o(i.ff_uni2oem))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ff_uni2oem
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[37c]"></a>ff_wtoupper</STRONG> (Thumb, 128 bytes, Stack size 12 bytes, ffunicode.o(i.ff_wtoupper))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[19d]"></a>fputc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(i.__0printf$1)
</UL>
<P><STRONG><a name="[3a6]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[125]"></a>in_func</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, jpeg.o(i.in_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = in_func &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_FatFs_Write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jpeg.o(i.JPEG_Code)
</UL>
<P><STRONG><a name="[288]"></a>jd_decomp</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, tjpgd.o(i.jd_decomp))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = jd_decomp &rArr; mcu_output
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_output
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_load
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Code
</UL>

<P><STRONG><a name="[287]"></a>jd_prepare</STRONG> (Thumb, 688 bytes, Stack size 40 bytes, tjpgd.o(i.jd_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = jd_prepare &rArr; create_huffman_tbl
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_huffman_tbl
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Code
</UL>

<P><STRONG><a name="[80]"></a>main</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1628<LI>Call Chain = main &rArr; my_main &rArr; Menu_Del &rArr; Game_Init &rArr; nes_load &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_FatFs_Write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_main
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[3b1]"></a>my_main</STRONG> (Thumb, 420 bytes, Stack size 24 bytes, my_main.o(i.my_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1628<LI>Call Chain = my_main &rArr; Menu_Del &rArr; Game_Init &rArr; nes_load &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_FatFs_Write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Init
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789_Init
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Del
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNums
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_DrawFont_GBK16
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetState
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[296]"></a>mypow</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, st7789.o(i.mypow))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
</UL>

<P><STRONG><a name="[375]"></a>nes_apu_fill_buffer</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, nes_main.o(i.nes_apu_fill_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nes_apu_fill_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_soundoutput
</UL>

<P><STRONG><a name="[3b8]"></a>nes_emulate_frame</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, nes_main.o(i.nes_emulate_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = nes_emulate_frame &rArr; apu_soundoutput &rArr; apu_process &rArr; apu_regwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_soundoutput
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_vblank
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanline_draw
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run6502
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_vblank
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_scanline_and_dont_draw
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_start_frame
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_enabled
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_set_window
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_get_gamepadval
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_load
</UL>

<P><STRONG><a name="[1e0]"></a>nes_load</STRONG> (Thumb, 398 bytes, Stack size 1104 bytes, nes_main.o(i.nes_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 1532<LI>Call Chain = nes_load &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_FatFs_Write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_init
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_WFlash
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_EraseFlashSector
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu6502_init
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_reset
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapper_Init
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_load_rom
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_emulate_frame
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_SetPlay_SamplesPerSec
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Game_Init
</UL>

<P><STRONG><a name="[3be]"></a>nes_load_rom</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, nes_main.o(i.nes_load_rom))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nes_load_rom &rArr; compile
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_load
</UL>

<P><STRONG><a name="[126]"></a>out_func</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, jpeg.o(i.out_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = out_func &rArr; LCD_DrawBMP &rArr; LCD_SetWindows &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBMP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jpeg.o(i.JPEG_Code)
</UL>
<P><STRONG><a name="[30d]"></a>read_2007</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, nes_ppu.o(i.read_2007))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_ReadFromPort
</UL>

<P><STRONG><a name="[39e]"></a>render_bg</STRONG> (Thumb, 724 bytes, Stack size 40 bytes, nes_ppu.o(i.render_bg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = render_bg
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_scanline_and_draw
</UL>

<P><STRONG><a name="[39f]"></a>render_spr</STRONG> (Thumb, 452 bytes, Stack size 52 bytes, nes_ppu.o(i.render_spr))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = render_spr
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spr_clip_left8
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_scanline_and_draw
</UL>

<P><STRONG><a name="[3bd]"></a>scanline_draw</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, nes_ppu.o(i.scanline_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = scanline_draw &rArr; do_scanline_and_draw &rArr; render_spr
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DMAPushColor
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_scanline_and_draw
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_emulate_frame
</UL>

<P><STRONG><a name="[2b0]"></a>set_CPU_banks</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nes_mapper.o(i.set_CPU_banks))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = set_CPU_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapEF_
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapCD_
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapAB_
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map89_
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP7_MemoryWrite
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP72_MemoryWrite
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP4_MMC3_set_CPU_banks
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP34_MemoryWrite
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP2_MemoryWrite
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP1_MMC1_set_CPU_banks
</UL>

<P><STRONG><a name="[29e]"></a>set_PPU_bank0</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, nes_mapper.o(i.set_PPU_bank0))
<BR><BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tile_bank
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP8_MemoryWrite
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP88_MemoryWrite
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP87_MemoryWrite
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP85_MemoryWrite
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP79_MemoryWriteLow
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP78_MemoryWrite
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP76_MemoryWrite
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP75_MemoryWrite
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP70_MemoryWrite
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP69_MemoryWrite
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP67_Reset
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP67_MemoryWrite
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP66_MemoryWrite
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP65_MemoryWrite
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP64_MemoryWrite
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP33_MemoryWrite
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP32_MemoryWrite
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP25_MemoryWrite
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP24_MemoryWrite
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP240_MemoryWriteLow
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP23_MemoryWrite
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP22_MemoryWrite
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP225_MemoryWrite
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP21_MemoryWrite
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP1_MemoryWrite
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_Reset
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_MemoryWrite
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP18_MemoryWrite
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP189_MemoryWrite
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP17_MemoryWriteLow
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP16_MemoryWrite2
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP11_MemoryWrite
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWriteLow
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWrite
</UL>

<P><STRONG><a name="[29f]"></a>set_PPU_bank1</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, nes_mapper.o(i.set_PPU_bank1))
<BR><BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tile_bank
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP8_MemoryWrite
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP88_MemoryWrite
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP87_MemoryWrite
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP85_MemoryWrite
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP79_MemoryWriteLow
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP78_MemoryWrite
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP76_MemoryWrite
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP75_MemoryWrite
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP70_MemoryWrite
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP69_MemoryWrite
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP67_Reset
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP67_MemoryWrite
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP66_MemoryWrite
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP65_MemoryWrite
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP64_MemoryWrite
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP33_MemoryWrite
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP32_MemoryWrite
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP25_MemoryWrite
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP24_MemoryWrite
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP240_MemoryWriteLow
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP23_MemoryWrite
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP22_MemoryWrite
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP225_MemoryWrite
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP21_MemoryWrite
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP1_MemoryWrite
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_Reset
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_MemoryWrite
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP18_MemoryWrite
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP189_MemoryWrite
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP17_MemoryWriteLow
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP16_MemoryWrite2
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP11_MemoryWrite
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWriteLow
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWrite
</UL>

<P><STRONG><a name="[2ad]"></a>set_PPU_bank10</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nes_mapper.o(i.set_PPU_bank10))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_MemoryWrite
</UL>

<P><STRONG><a name="[2ae]"></a>set_PPU_bank11</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nes_mapper.o(i.set_PPU_bank11))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_MemoryWrite
</UL>

<P><STRONG><a name="[2a0]"></a>set_PPU_bank2</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, nes_mapper.o(i.set_PPU_bank2))
<BR><BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tile_bank
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP8_MemoryWrite
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP88_MemoryWrite
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP87_MemoryWrite
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP85_MemoryWrite
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP79_MemoryWriteLow
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP78_MemoryWrite
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP76_MemoryWrite
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP75_MemoryWrite
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP70_MemoryWrite
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP69_MemoryWrite
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP67_Reset
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP67_MemoryWrite
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP66_MemoryWrite
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP65_MemoryWrite
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP64_MemoryWrite
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP33_MemoryWrite
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP32_MemoryWrite
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP25_MemoryWrite
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP24_MemoryWrite
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP240_MemoryWriteLow
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP23_MemoryWrite
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP22_MemoryWrite
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP225_MemoryWrite
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP21_MemoryWrite
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP1_MemoryWrite
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_Reset
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_MemoryWrite
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP18_MemoryWrite
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP189_MemoryWrite
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP17_MemoryWriteLow
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP16_MemoryWrite2
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP11_MemoryWrite
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWriteLow
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWrite
</UL>

<P><STRONG><a name="[2a1]"></a>set_PPU_bank3</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, nes_mapper.o(i.set_PPU_bank3))
<BR><BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tile_bank
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP8_MemoryWrite
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP88_MemoryWrite
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP87_MemoryWrite
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP85_MemoryWrite
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP79_MemoryWriteLow
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP78_MemoryWrite
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP76_MemoryWrite
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP75_MemoryWrite
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP70_MemoryWrite
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP69_MemoryWrite
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP67_Reset
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP67_MemoryWrite
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP66_MemoryWrite
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP65_MemoryWrite
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP64_MemoryWrite
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP33_MemoryWrite
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP32_MemoryWrite
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP25_MemoryWrite
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP24_MemoryWrite
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP240_MemoryWriteLow
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP23_MemoryWrite
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP22_MemoryWrite
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP225_MemoryWrite
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP21_MemoryWrite
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP1_MemoryWrite
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_Reset
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_MemoryWrite
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP18_MemoryWrite
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP189_MemoryWrite
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP17_MemoryWriteLow
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP16_MemoryWrite2
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP11_MemoryWrite
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWriteLow
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWrite
</UL>

<P><STRONG><a name="[2a2]"></a>set_PPU_bank4</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, nes_mapper.o(i.set_PPU_bank4))
<BR><BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tile_bank
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP8_MemoryWrite
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP88_MemoryWrite
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP87_MemoryWrite
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP85_MemoryWrite
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP79_MemoryWriteLow
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP78_MemoryWrite
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP76_MemoryWrite
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP75_MemoryWrite
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP70_MemoryWrite
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP69_MemoryWrite
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP67_Reset
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP67_MemoryWrite
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP66_MemoryWrite
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP65_MemoryWrite
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP64_MemoryWrite
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP33_MemoryWrite
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP32_MemoryWrite
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP25_MemoryWrite
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP24_MemoryWrite
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP240_MemoryWriteLow
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP23_MemoryWrite
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP22_MemoryWrite
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP225_MemoryWrite
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP21_MemoryWrite
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP1_MemoryWrite
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_Reset
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_MemoryWrite
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP18_MemoryWrite
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP189_MemoryWrite
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP17_MemoryWriteLow
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP16_MemoryWrite2
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP11_MemoryWrite
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWriteLow
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWrite
</UL>

<P><STRONG><a name="[2a3]"></a>set_PPU_bank5</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, nes_mapper.o(i.set_PPU_bank5))
<BR><BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tile_bank
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP8_MemoryWrite
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP88_MemoryWrite
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP87_MemoryWrite
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP85_MemoryWrite
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP79_MemoryWriteLow
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP78_MemoryWrite
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP76_MemoryWrite
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP75_MemoryWrite
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP70_MemoryWrite
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP69_MemoryWrite
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP67_Reset
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP67_MemoryWrite
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP66_MemoryWrite
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP65_MemoryWrite
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP64_MemoryWrite
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP33_MemoryWrite
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP32_MemoryWrite
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP25_MemoryWrite
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP24_MemoryWrite
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP240_MemoryWriteLow
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP23_MemoryWrite
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP22_MemoryWrite
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP225_MemoryWrite
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP21_MemoryWrite
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP1_MemoryWrite
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_Reset
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_MemoryWrite
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP18_MemoryWrite
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP189_MemoryWrite
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP17_MemoryWriteLow
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP16_MemoryWrite2
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP11_MemoryWrite
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWriteLow
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWrite
</UL>

<P><STRONG><a name="[2a4]"></a>set_PPU_bank6</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, nes_mapper.o(i.set_PPU_bank6))
<BR><BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tile_bank
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP8_MemoryWrite
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP88_MemoryWrite
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP87_MemoryWrite
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP85_MemoryWrite
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP79_MemoryWriteLow
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP78_MemoryWrite
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP76_MemoryWrite
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP75_MemoryWrite
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP70_MemoryWrite
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP69_MemoryWrite
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP67_Reset
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP67_MemoryWrite
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP66_MemoryWrite
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP65_MemoryWrite
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP64_MemoryWrite
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP33_MemoryWrite
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP32_MemoryWrite
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP25_MemoryWrite
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP24_MemoryWrite
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP240_MemoryWriteLow
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP23_MemoryWrite
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP22_MemoryWrite
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP225_MemoryWrite
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP21_MemoryWrite
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP1_MemoryWrite
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_Reset
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_MemoryWrite
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP18_MemoryWrite
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP189_MemoryWrite
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP17_MemoryWriteLow
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP16_MemoryWrite2
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP11_MemoryWrite
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWriteLow
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWrite
</UL>

<P><STRONG><a name="[2a5]"></a>set_PPU_bank7</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, nes_mapper.o(i.set_PPU_bank7))
<BR><BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tile_bank
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP8_MemoryWrite
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP88_MemoryWrite
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP87_MemoryWrite
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP85_MemoryWrite
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP79_MemoryWriteLow
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP78_MemoryWrite
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP76_MemoryWrite
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP75_MemoryWrite
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP70_MemoryWrite
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP69_MemoryWrite
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP67_Reset
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP67_MemoryWrite
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP66_MemoryWrite
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP65_MemoryWrite
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP64_MemoryWrite
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP33_MemoryWrite
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP32_MemoryWrite
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP25_MemoryWrite
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP24_MemoryWrite
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP240_MemoryWriteLow
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP23_MemoryWrite
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP22_MemoryWrite
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP225_MemoryWrite
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP21_MemoryWrite
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP1_MemoryWrite
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_Reset
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_MemoryWrite
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP18_MemoryWrite
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP189_MemoryWrite
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP17_MemoryWriteLow
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP16_MemoryWrite2
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP11_MemoryWrite
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWriteLow
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWrite
</UL>

<P><STRONG><a name="[2ab]"></a>set_PPU_bank8</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nes_mapper.o(i.set_PPU_bank8))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_MemoryWrite
</UL>

<P><STRONG><a name="[2ac]"></a>set_PPU_bank9</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nes_mapper.o(i.set_PPU_bank9))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_MemoryWrite
</UL>

<P><STRONG><a name="[299]"></a>set_PPU_banks</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, nes_mapper.o(i.set_PPU_banks))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = set_PPU_banks &rArr; set_tile_banks
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tile_banks
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP99_WriteHighRegs
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP99_Reset
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP8_Reset
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP88_Reset
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP87_Reset
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP85_Reset
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP79_Reset
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP78_Reset
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP76_Reset
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP75_Reset
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP72_Reset
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP72_MemoryWrite
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP6_Reset
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP69_Reset
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP66_Reset
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP65_Reset
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP64_Reset
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP4_MMC3_set_PPU_banks
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP3_Reset
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP3_MemoryWrite
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP34_Reset
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP33_Reset
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP32_Reset
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP25_Reset
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP24_Reset
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP240_Reset
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP23_Reset
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP22_Reset
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP225_Reset
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP1_MemoryWrite
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP189_Reset
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP11_Reset
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_Reset
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP0_Reset
</UL>

<P><STRONG><a name="[2a7]"></a>set_VRAM_bank</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, nes_mapper.o(i.set_VRAM_bank))
<BR><BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_name_table
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP85_Reset
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP85_MemoryWrite
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP6_Reset
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP6_MemoryWrite
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP4_MMC3_set_PPU_banks
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP1_MemoryWrite
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_MemoryWrite
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP13_Reset
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP13_MemoryWrite
</UL>

<P><STRONG><a name="[2a6]"></a>set_mirroring</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, nes_ppu.o(i.set_mirroring))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set_mirroring
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_reset
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP88_MemoryWrite
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP85_MemoryWrite
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP7_MemoryWrite
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP78_MemoryWrite
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP75_MemoryWrite
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP71_MemoryWrite
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP70_MemoryWrite
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP6_MemoryWriteLow
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP69_MemoryWrite
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP67_MemoryWrite
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP65_MemoryWrite
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP64_MemoryWrite
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP4_MemoryWrite
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP33_MemoryWrite
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP32_MemoryWrite
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP25_MemoryWrite
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP24_MemoryWrite
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP23_MemoryWrite
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP22_MemoryWrite
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP227_MemoryWrite
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP225_MemoryWrite
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP21_MemoryWrite
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP1_MemoryWrite
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP18_MemoryWrite
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP189_MemoryWrite
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP17_MemoryWriteLow
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP16_MemoryWrite2
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP15_MemoryWrite
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP11_Reset
</UL>

<P><STRONG><a name="[3c4]"></a>set_name_table</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nes_ppu.o(i.set_name_table))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_VRAM_bank
</UL>

<P><STRONG><a name="[3c2]"></a>set_tile_bank</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nes_ppu.o(i.set_tile_bank))
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank7
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank6
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank5
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank4
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank3
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank2
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank1
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_bank0
</UL>

<P><STRONG><a name="[3c3]"></a>set_tile_banks</STRONG> (Thumb, 26 bytes, Stack size 20 bytes, nes_ppu.o(i.set_tile_banks))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = set_tile_banks
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PPU_banks
</UL>

<P><STRONG><a name="[36d]"></a>shift_register15</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nes_apu.o(i.shift_register15))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = shift_register15
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_noise
</UL>

<P><STRONG><a name="[3c1]"></a>spr_clip_left8</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nes_ppu.o(i.spr_clip_left8))
<BR><BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;render_spr
</UL>

<P><STRONG><a name="[2a9]"></a>spr_enabled</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nes_ppu.o(i.spr_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_scanline_and_dont_draw
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_start_frame
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_scanline_and_draw
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP67_HSync
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP64_HSync
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP4_HSync
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP33_HSync
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP189_HSync
</UL>

<P><STRONG><a name="[39b]"></a>sprite0_hit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nes_ppu.o(i.sprite0_hit))
<BR><BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_scanline_and_dont_draw
</UL>

<P><STRONG><a name="[39c]"></a>sprites_8x16</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nes_ppu.o(i.sprites_8x16))
<BR><BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_scanline_and_dont_draw
</UL>

<P><STRONG><a name="[3b9]"></a>start_vblank</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nes_ppu.o(i.start_vblank))
<BR><BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_emulate_frame
</UL>

<P><STRONG><a name="[3c5]"></a>update_tile</STRONG> (Thumb, 188 bytes, Stack size 12 bytes, nes_ppu.o(i.update_tile))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = update_tile
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_2007
</UL>

<P><STRONG><a name="[30e]"></a>write_2007</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, nes_ppu.o(i.write_2007))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = write_2007 &rArr; update_tile
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_tile
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_WriteToPort
</UL>

<P><STRONG><a name="[366]"></a>K6502_Read</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, 6502.o(io_code))
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apu_dmc
</UL>

<P><STRONG><a name="[3bf]"></a>cpu6502_init</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, 6502.o(rom_code))
<BR><BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_load
</UL>

<P><STRONG><a name="[3e4]"></a>map67_0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(rom_code), UNUSED)

<P><STRONG><a name="[2b3]"></a>map67_</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(rom_code))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP69_MemoryWrite
</UL>

<P><STRONG><a name="[29a]"></a>map89_</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(rom_code))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_CPU_banks
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP8_MemoryWrite
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP88_MemoryWrite
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP85_MemoryWrite
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP79_MemoryWriteLow
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP78_MemoryWrite
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP76_MemoryWrite
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP75_MemoryWrite
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP73_MemoryWrite
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP71_MemoryWrite
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP70_MemoryWrite
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP6_MemoryWrite
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP69_MemoryWrite
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP67_MemoryWrite
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP66_MemoryWrite
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP65_MemoryWrite
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP64_MemoryWrite
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP33_MemoryWrite
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP32_MemoryWrite
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP25_MemoryWrite
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP24_MemoryWrite
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP245_MemoryWrite
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP240_MemoryWriteLow
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP23_MemoryWrite
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP22_MemoryWrite
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP227_MemoryWrite
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP225_MemoryWrite
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP21_MemoryWrite
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_MemoryWrite
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP18_MemoryWrite
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP17_MemoryWriteLow
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP16_MemoryWrite2
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP15_MemoryWrite
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP13_MemoryWrite
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP11_MemoryWrite
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWriteLow
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWrite
</UL>

<P><STRONG><a name="[29b]"></a>mapAB_</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(rom_code))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_CPU_banks
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP8_MemoryWrite
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP88_MemoryWrite
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP85_MemoryWrite
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP79_MemoryWriteLow
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP78_MemoryWrite
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP76_MemoryWrite
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP75_MemoryWrite
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP73_MemoryWrite
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP71_MemoryWrite
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP70_MemoryWrite
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP6_MemoryWrite
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP69_MemoryWrite
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP67_MemoryWrite
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP66_MemoryWrite
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP65_MemoryWrite
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP64_MemoryWrite
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP33_MemoryWrite
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP32_MemoryWrite
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP25_MemoryWrite
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP24_MemoryWrite
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP245_MemoryWrite
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP240_MemoryWriteLow
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP23_MemoryWrite
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP22_MemoryWrite
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP227_MemoryWrite
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP225_MemoryWrite
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP21_MemoryWrite
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_MemoryWrite
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP18_MemoryWrite
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP189_MemoryWrite
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP17_MemoryWriteLow
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP16_MemoryWrite2
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP15_MemoryWrite
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP13_MemoryWrite
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP11_MemoryWrite
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWriteLow
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWrite
</UL>

<P><STRONG><a name="[29c]"></a>mapCD_</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(rom_code))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_CPU_banks
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP85_MemoryWrite
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP79_MemoryWriteLow
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP75_MemoryWrite
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP69_MemoryWrite
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP66_MemoryWrite
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP65_MemoryWrite
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP64_MemoryWrite
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP32_MemoryWrite
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP25_MemoryWrite
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP24_MemoryWrite
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP240_MemoryWriteLow
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP23_MemoryWrite
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP227_MemoryWrite
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP225_MemoryWrite
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP21_MemoryWrite
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP19_MemoryWrite
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP18_MemoryWrite
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP189_MemoryWrite
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP17_MemoryWriteLow
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP15_MemoryWrite
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP13_MemoryWrite
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP11_MemoryWrite
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWriteLow
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWrite
</UL>

<P><STRONG><a name="[29d]"></a>mapEF_</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(rom_code))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_CPU_banks
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP79_MemoryWriteLow
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP66_MemoryWrite
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP240_MemoryWriteLow
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP227_MemoryWrite
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP225_MemoryWrite
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP17_MemoryWriteLow
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP15_MemoryWrite
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP13_MemoryWrite
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP11_MemoryWrite
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWriteLow
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP113_MemoryWrite
</UL>

<P><STRONG><a name="[3e5]"></a>map89ABCDEF_</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(rom_code), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[333]"></a>IntToUnicode</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, usbd_desc.o(i.IntToUnicode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_SerialStrDescriptor
</UL>

<P><STRONG><a name="[8]"></a>STORAGE_GetCapacity_FS</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_storage_if.o(i.STORAGE_GetCapacity_FS))
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_if.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>STORAGE_GetMaxLun_FS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_storage_if.o(i.STORAGE_GetMaxLun_FS))
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_if.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>STORAGE_Init_FS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_storage_if.o(i.STORAGE_Init_FS))
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_if.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>STORAGE_IsReady_FS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_storage_if.o(i.STORAGE_IsReady_FS))
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_if.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>STORAGE_IsWriteProtected_FS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_storage_if.o(i.STORAGE_IsWriteProtected_FS))
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_if.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>STORAGE_Read_FS</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_storage_if.o(i.STORAGE_Read_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = STORAGE_Read_FS &rArr; W25QXX_FatFs_Read &rArr; W25QXX_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_FatFs_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_if.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>STORAGE_Write_FS</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_storage_if.o(i.STORAGE_Write_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = STORAGE_Write_FS &rArr; W25QXX_FatFs_Write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_FatFs_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_if.o(.data)
</UL>
<P><STRONG><a name="[222]"></a>PCD_EP_OutXfrComplete_int</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, stm32f4xx_hal_pcd.o(i.PCD_EP_OutXfrComplete_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = PCD_EP_OutXfrComplete_int &rArr; HAL_PCD_DataOutStageCallback &rArr; USBD_LL_DataOutStage &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[228]"></a>PCD_WriteEmptyTxFifo</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, stm32f4xx_hal_pcd.o(i.PCD_WriteEmptyTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PCD_WriteEmptyTxFifo &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[34e]"></a>USB_CoreReset</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_CoreReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
</UL>

<P><STRONG><a name="[1f8]"></a>FLASH_Program_Byte</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[1f7]"></a>FLASH_Program_DoubleWord</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_DoubleWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Program_DoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[1f9]"></a>FLASH_Program_HalfWord</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_HalfWord))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[1fa]"></a>FLASH_Program_Word</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_Word))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[1d5]"></a>FLASH_SetErrorCode</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_SetErrorCode))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[1f3]"></a>FLASH_MassErase</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_MassErase))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[1ee]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[1ed]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f4xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_CheckFifoParam
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[1f0]"></a>DMA_SetConfig</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f4xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[201]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[1e5]"></a>ADC_Init</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, stm32f4xx_hal_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[121]"></a>SPI_DMAAbortOnError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(i.SPI_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_IRQHandler)
</UL>
<P><STRONG><a name="[124]"></a>SPI_DMAError</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(i.SPI_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
</UL>
<P><STRONG><a name="[122]"></a>SPI_DMAHalfTransmitCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(i.SPI_DMAHalfTransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_DMAHalfTransmitCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
</UL>
<P><STRONG><a name="[123]"></a>SPI_DMATransmitCplt</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.SPI_DMATransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI_DMATransmitCplt &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxCpltCallback
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
</UL>
<P><STRONG><a name="[320]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
</UL>

<P><STRONG><a name="[322]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, stm32f4xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[265]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[270]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[272]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[273]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[263]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[264]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[27b]"></a>UART_SetConfig</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[27d]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[347]"></a>SWAPBYTE</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_ctlreq.o(i.SWAPBYTE))
<BR><BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
</UL>

<P><STRONG><a name="[334]"></a>USBD_GetDescriptor</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[348]"></a>USBD_SetConfig</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetClassConfig
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[2b4]"></a>MSC_BOT_Abort</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, usbd_msc_bot.o(i.MSC_BOT_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MSC_BOT_Abort &rArr; USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall &rArr; USB_EP0_OutStart
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
</UL>

<P><STRONG><a name="[2b6]"></a>MSC_BOT_CBW_Decode</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, usbd_msc_bot.o(i.MSC_BOT_CBW_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MSC_BOT_CBW_Decode &rArr; SCSI_ProcessCmd &rArr; SCSI_Write12 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Abort
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_GetRxDataSize
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataOut
</UL>

<P><STRONG><a name="[311]"></a>SCSI_CheckAddressRange</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, usbd_msc_scsi.o(i.SCSI_CheckAddressRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SCSI_CheckAddressRange
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write12
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read12
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[312]"></a>SCSI_Inquiry</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, usbd_msc_scsi.o(i.SCSI_Inquiry))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SCSI_Inquiry &rArr; SCSI_UpdateBotData
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_UpdateBotData
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[31d]"></a>SCSI_ProcessRead</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, usbd_msc_scsi.o(i.SCSI_ProcessRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SCSI_ProcessRead &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read12
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10
</UL>

<P><STRONG><a name="[31e]"></a>SCSI_ProcessWrite</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, usbd_msc_scsi.o(i.SCSI_ProcessWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write12
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10
</UL>

<P><STRONG><a name="[319]"></a>SCSI_Read10</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, usbd_msc_scsi.o(i.SCSI_Read10))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SCSI_Read10 &rArr; SCSI_ProcessRead &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessRead
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CheckAddressRange
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[31a]"></a>SCSI_Read12</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, usbd_msc_scsi.o(i.SCSI_Read12))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SCSI_Read12 &rArr; SCSI_ProcessRead &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessRead
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CheckAddressRange
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[317]"></a>SCSI_ReadCapacity10</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, usbd_msc_scsi.o(i.SCSI_ReadCapacity10))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SCSI_ReadCapacity10
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[318]"></a>SCSI_ReadCapacity16</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, usbd_msc_scsi.o(i.SCSI_ReadCapacity16))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SCSI_ReadCapacity16
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[316]"></a>SCSI_ReadFormatCapacity</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, usbd_msc_scsi.o(i.SCSI_ReadFormatCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SCSI_ReadFormatCapacity
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[315]"></a>SCSI_RequestSense</STRONG> (Thumb, 136 bytes, Stack size 12 bytes, usbd_msc_scsi.o(i.SCSI_RequestSense))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SCSI_RequestSense
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[314]"></a>SCSI_TestUnitReady</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, usbd_msc_scsi.o(i.SCSI_TestUnitReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SCSI_TestUnitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[313]"></a>SCSI_UpdateBotData</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_msc_scsi.o(i.SCSI_UpdateBotData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCSI_UpdateBotData
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Inquiry
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[31b]"></a>SCSI_Write10</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, usbd_msc_scsi.o(i.SCSI_Write10))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SCSI_Write10 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessWrite
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CheckAddressRange
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[31c]"></a>SCSI_Write12</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, usbd_msc_scsi.o(i.SCSI_Write12))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SCSI_Write12 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessWrite
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CheckAddressRange
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[20]"></a>PPU_W</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(CPU_GPU))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = PPU_W &rArr; PPU_WriteToPort &rArr; write_2007 &rArr; update_tile
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_WriteToPort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[18]"></a>PPU_R</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(CPU_GPU))
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_ReadFromPort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[83]"></a>_00</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR><BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VecCont
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[84]"></a>_01</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[87]"></a>_05</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[88]"></a>_06</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[8a]"></a>_08</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[8b]"></a>_09</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[8c]"></a>_0A</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[8d]"></a>_0D</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[8e]"></a>_0E</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[8f]"></a>_10</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[90]"></a>_11</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[92]"></a>_15</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[93]"></a>_16</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[94]"></a>_18</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[95]"></a>_19</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[96]"></a>_1D</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[97]"></a>_1E</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[98]"></a>_20</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[99]"></a>_21</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[9a]"></a>_24</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[9b]"></a>_25</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[9c]"></a>_26</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[9d]"></a>_28</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[9e]"></a>_29</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[9f]"></a>_2A</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[a0]"></a>_2C</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[a1]"></a>_2D</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[a2]"></a>_2E</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[a3]"></a>_30</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[a4]"></a>_31</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[a5]"></a>_35</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[a6]"></a>_36</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[a7]"></a>_38</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[a8]"></a>_39</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[a9]"></a>_3D</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[aa]"></a>_3E</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[ab]"></a>_40</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[ac]"></a>_41</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[ad]"></a>_45</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[ae]"></a>_46</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[af]"></a>_48</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[b0]"></a>_49</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[b1]"></a>_4A</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[b2]"></a>_4C</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[b3]"></a>_4D</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[b4]"></a>_4E</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[b5]"></a>_50</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[b6]"></a>_51</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[b7]"></a>_55</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[b8]"></a>_56</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[b9]"></a>_58</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[ba]"></a>_59</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[bb]"></a>_5D</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[bc]"></a>_5E</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[bd]"></a>_60</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[be]"></a>_61</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[bf]"></a>_65</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[c0]"></a>_66</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[c2]"></a>_68</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[c3]"></a>_69</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[c4]"></a>_6A</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[c5]"></a>_6C</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[c6]"></a>_6D</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[c7]"></a>_6E</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[c8]"></a>_70</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[c9]"></a>_71</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[ca]"></a>_75</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[cb]"></a>_76</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[cc]"></a>_78</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[cd]"></a>_79</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[ce]"></a>_7D</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[cf]"></a>_7E</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[d0]"></a>_81</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[d1]"></a>_84</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[d2]"></a>_85</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[d3]"></a>_86</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[d4]"></a>_88</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[d5]"></a>_8A</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[d6]"></a>_8C</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[d7]"></a>_8D</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[d8]"></a>_8E</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[d9]"></a>_90</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[da]"></a>_91</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[db]"></a>_94</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[dc]"></a>_95</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[dd]"></a>_96</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[de]"></a>_98</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[df]"></a>_99</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[e0]"></a>_9A</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[e1]"></a>_9D</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[e2]"></a>_A0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[e3]"></a>_A1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[e4]"></a>_A2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[e5]"></a>_A4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[e6]"></a>_A5</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[e7]"></a>_A6</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[e8]"></a>_A8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[e9]"></a>_A9</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[ea]"></a>_AA</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[eb]"></a>_AC</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[ec]"></a>_AD</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[ed]"></a>_AE</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[ee]"></a>_B0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[ef]"></a>_B1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[f0]"></a>_B4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[f1]"></a>_B5</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[f2]"></a>_B6</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[f3]"></a>_B8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[f4]"></a>_B9</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[f5]"></a>_BA</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[f6]"></a>_BC</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[f7]"></a>_BD</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[f8]"></a>_BE</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[f9]"></a>_C0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[fa]"></a>_C1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[fb]"></a>_C4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[fc]"></a>_C5</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[fd]"></a>_C6</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[fe]"></a>_C8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[ff]"></a>_C9</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[100]"></a>_CA</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[101]"></a>_CC</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[102]"></a>_CD</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[103]"></a>_CE</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[104]"></a>_D0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[105]"></a>_D1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[106]"></a>_D5</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[107]"></a>_D6</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[108]"></a>_D8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[109]"></a>_D9</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[10a]"></a>_DD</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[10b]"></a>_DE</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[10c]"></a>_E0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[10d]"></a>_E1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[10e]"></a>_E4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[10f]"></a>_E5</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[110]"></a>_E6</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[111]"></a>_E8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[112]"></a>_E9</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[113]"></a>_EA</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[114]"></a>_EC</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[115]"></a>_ED</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[116]"></a>_EE</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[117]"></a>_F0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[118]"></a>_F1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[119]"></a>_F5</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[11a]"></a>_F6</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[11b]"></a>_F8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[11c]"></a>_F9</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[11e]"></a>_FD</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[11f]"></a>_FE</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[120]"></a>_FF</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[11d]"></a>_FB</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[91]"></a>_14</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[c1]"></a>_67</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[86]"></a>_03</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[89]"></a>_07</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[85]"></a>_xx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_6502
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_code)
</UL>
<P><STRONG><a name="[24]"></a>exit_run</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_run))
<BR>[Address Reference Count : 2]<UL><LI> 6502.o(wram_globals0)
<LI> 6502.o(cpu_run)
</UL>
<P><STRONG><a name="[1bc]"></a>VecCont</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_run))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_00
</UL>

<P><STRONG><a name="[19]"></a>IO_R</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(io_code))
<BR><BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;empty_R
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Low
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[21]"></a>IO_W</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(io_code))
<BR><BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;empty_R
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Low
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[3c6]"></a>Read_Low</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, 6502.o(io_code))
<BR><BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asm_Mapper_ReadLow
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_R
</UL>

<P><STRONG><a name="[3c8]"></a>Write_Low</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, 6502.o(io_code))
<BR><BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asm_Mapper_WriteLow
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_W
</UL>

<P><STRONG><a name="[1a1]"></a>apu_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(io_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = apu_w &rArr; Apu_Write &rArr; apu_enqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Apu_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(io_code)
</UL>
<P><STRONG><a name="[1a3]"></a>apu_4015w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(io_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = apu_4015w &rArr; Apu_Write4015 &rArr; apu_enqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Apu_Write4015
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(io_code)
</UL>
<P><STRONG><a name="[1a5]"></a>apu_4017w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(io_code))
<BR><BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Apu_Write4017
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(io_code)
</UL>
<P><STRONG><a name="[19e]"></a>apu_4015R</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(io_code))
<BR><BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Apu_Read4015
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(io_code)
</UL>
<P><STRONG><a name="[1a2]"></a>dma_W</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(io_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(io_code)
</UL>
<P><STRONG><a name="[1a4]"></a>joy0_W</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(io_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(io_code)
</UL>
<P><STRONG><a name="[19f]"></a>joy0_R</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(io_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(io_code)
</UL>
<P><STRONG><a name="[1a0]"></a>joy1_R</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(io_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(io_code)
</UL>
<P><STRONG><a name="[1a6]"></a>Mapper_W</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(rom_code))
<BR><BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asm_Mapper_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(rom_code)
</UL>
<P><STRONG><a name="[3c7]"></a>empty_R</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(rwram_code))
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_6502
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_W
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_R
</UL>

<P><STRONG><a name="[23]"></a>void</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, 6502.o(rwram_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[17]"></a>ram_R</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(rwram_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[1f]"></a>ram_W</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(rwram_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[1a]"></a>sram_R</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(rwram_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[22]"></a>sram_W</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(rwram_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[1b]"></a>rom_R80</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(rwram_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[1c]"></a>rom_RA0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(rwram_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[1d]"></a>rom_RC0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(rwram_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[1e]"></a>rom_RE0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(rwram_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[376]"></a>check_fs</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_FatFs_Write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[389]"></a>clst2sect</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.clst2sect))
<BR><BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[37b]"></a>cmp_lfn</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, ff.o(i.cmp_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = cmp_lfn &rArr; ff_wtoupper
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[37d]"></a>create_chain</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_FatFs_Write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[382]"></a>create_name</STRONG> (Thumb, 580 bytes, Stack size 40 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = create_name &rArr; ff_uni2oem
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_uni2oem
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_oem2uni
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_1st
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[383]"></a>dbc_1st</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ff.o(i.dbc_1st))
<BR><BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[387]"></a>dir_clear</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, ff.o(i.dir_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = dir_clear &rArr; sync_window &rArr; disk_write &rArr; W25QXX_FatFs_Write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[38b]"></a>dir_find</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_FatFs_Write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[38e]"></a>dir_next</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_FatFs_Write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[38f]"></a>dir_read</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, ff.o(i.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_FatFs_Write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[391]"></a>dir_register</STRONG> (Thumb, 486 bytes, Stack size 64 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_FatFs_Write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[38c]"></a>dir_sdi</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_FatFs_Write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[3a5]"></a>follow_path</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_FatFs_Write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[392]"></a>gen_numname</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, ff.o(i.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gen_numname
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_1st
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[37e]"></a>get_fat</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_FatFs_Write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[3ac]"></a>get_fileinfo</STRONG> (Thumb, 338 bytes, Stack size 40 bytes, ff.o(i.get_fileinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = get_fileinfo &rArr; ff_uni2oem
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_uni2oem
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[3a3]"></a>get_ldnumber</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[3a8]"></a>ld_clust</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ff.o(i.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ld_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[37a]"></a>ld_dword</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ff.o(i.ld_dword))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[378]"></a>ld_word</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ff.o(i.ld_word))
<BR><BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[3a4]"></a>mount_volume</STRONG> (Thumb, 576 bytes, Stack size 40 bytes, ff.o(i.mount_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = mount_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_FatFs_Write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[377]"></a>move_window</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_FatFs_Write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[390]"></a>pick_lfn</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, ff.o(i.pick_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pick_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[37f]"></a>put_fat</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_FatFs_Write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[3aa]"></a>remove_chain</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_FatFs_Write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[3a9]"></a>st_clust</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ff.o(i.st_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[3a7]"></a>st_dword</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.st_dword))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>

<P><STRONG><a name="[393]"></a>st_word</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ff.o(i.st_word))
<BR><BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[38d]"></a>sum_sfn</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.sum_sfn))
<BR><BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[3ad]"></a>sync_fs</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; W25QXX_FatFs_Write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[388]"></a>sync_window</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = sync_window &rArr; disk_write &rArr; W25QXX_FatFs_Write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[3a1]"></a>validate</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
</UL>

<P><STRONG><a name="[381]"></a>alloc_pool</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tjpgd.o(i.alloc_pool))
<BR><BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_huffman_tbl
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_prepare
</UL>

<P><STRONG><a name="[3b3]"></a>bitext</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, tjpgd.o(i.bitext))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bitext
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_load
</UL>

<P><STRONG><a name="[3b4]"></a>block_idct</STRONG> (Thumb, 444 bytes, Stack size 36 bytes, tjpgd.o(i.block_idct))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = block_idct
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_load
</UL>

<P><STRONG><a name="[380]"></a>create_huffman_tbl</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, tjpgd.o(i.create_huffman_tbl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = create_huffman_tbl
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_prepare
</UL>

<P><STRONG><a name="[3b2]"></a>huffext</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, tjpgd.o(i.huffext))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = huffext
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_load
</UL>

<P><STRONG><a name="[3af]"></a>mcu_load</STRONG> (Thumb, 364 bytes, Stack size 48 bytes, tjpgd.o(i.mcu_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mcu_load &rArr; block_idct
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;huffext
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_idct
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitext
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_decomp
</UL>

<P><STRONG><a name="[3b0]"></a>mcu_output</STRONG> (Thumb, 792 bytes, Stack size 128 bytes, tjpgd.o(i.mcu_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mcu_output
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_decomp
</UL>

<P><STRONG><a name="[3ae]"></a>restart</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, tjpgd.o(i.restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = restart
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_decomp
</UL>

<P><STRONG><a name="[362]"></a>_printf_core</STRONG> (Thumb, 336 bytes, Stack size 88 bytes, printf1.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$1
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
